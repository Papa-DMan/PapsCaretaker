"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchService = void 0;
const __1 = require("..");
const util_1 = require("../util");
/**
 * @ignore
 */
class SearchService {
    /* istanbul ignore next */
    static search(youtube, types, searchTerm, maxResults = 10, pageToken, channelId, fields, category, onlyEmbeddable = false, eventType, videoType) {
        return __awaiter(this, void 0, void 0, function* () {
            const type = types.map(t => t.endpoint.substring(0, t.endpoint.length - 1)).join(',');
            const cached = util_1.Cache.get(`search://${type}/"${searchTerm}"/${maxResults}/"${pageToken}"`);
            if (youtube._shouldCache && cached) {
                return cached;
            }
            if (maxResults < 1 || maxResults > 50) {
                return Promise.reject('Max results must be greater than 0 and less than or equal to 50');
            }
            const data = {
                q: encodeURIComponent(searchTerm),
                fields: encodeURIComponent(fields || 'prevPageToken,nextPageToken,items(kind,id,snippet(title,description,thumbnails,publishedAt,channelId,liveBroadcastContent))'),
                maxResults,
                part: 'snippet',
                type,
                regionCode: youtube.region
            };
            if (channelId) {
                data.channelId = channelId;
            }
            if (pageToken) {
                data.pageToken = pageToken;
            }
            if (category) {
                data.category = category;
            }
            if (eventType) {
                data.eventType = eventType;
            }
            if (onlyEmbeddable) {
                data.videoEmbeddable = 'true';
            }
            if (videoType) {
                data.videoType = videoType;
            }
            const results = yield youtube._request.api('search', data, youtube.token, youtube.accessToken);
            const items = [];
            results.items.forEach(item => {
                if (item.id.videoId) {
                    items.push(new __1.Video(youtube, item));
                }
                else if (item.id.channelId) {
                    items.push(new __1.Channel(youtube, item));
                }
                else if (item.id.playlistId) {
                    items.push(new __1.Playlist(youtube, item));
                }
            });
            const toReturn = { results: items, prevPageToken: results.prevPageToken, nextPageToken: results.nextPageToken };
            if (youtube._shouldCache && youtube._cacheSearches) {
                youtube._cache(`search://${type}/"${searchTerm}"/${maxResults}/"${pageToken}"`, toReturn);
            }
            return toReturn;
        });
    }
}
exports.SearchService = SearchService;

//# sourceMappingURL=search-service.js.map
