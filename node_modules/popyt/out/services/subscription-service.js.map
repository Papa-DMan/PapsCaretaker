{"version":3,"sources":["../src/services/subscription-service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,0BAA0C;AAC1C,kCAA+B;AAE/B;;GAEG;AACH,MAAa,mBAAmB;IAC9B,0BAA0B;IACnB,MAAM,CAAO,yBAAyB,CAAE,OAAgB,EAAE,YAAoB,EAAE,SAAiB;;YACtG,MAAM,MAAM,GAAG,YAAK,CAAC,GAAG,CAAC,sBAAsB,YAAY,MAAM,SAAS,GAAG,CAAC,CAAA;YAE9E,IAAI,OAAO,CAAC,YAAY,IAAI,MAAM,EAAE;gBAClC,OAAO,MAAM,CAAA;aACd;YAED,MAAM,IAAI,GAKN;gBACF,IAAI,EAAE,0CAA0C;gBAChD,YAAY,EAAE,SAAS;gBACvB,SAAS,EAAE,YAAY;gBACvB,UAAU,EAAE,CAAC;aACd,CAAA;YAED,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,WAAW,CAAC,CAAA;YAErG,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC9B,OAAO,OAAO,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAA;aAChD;YAED,MAAM,QAAQ,GAAG,IAAI,gBAAY,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;YAE5D,IAAI,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,cAAc,EAAE;gBAClD,OAAO,CAAC,MAAM,CAAC,sBAAsB,YAAY,MAAM,SAAS,GAAG,EAAE,QAAQ,CAAC,CAAA;aAC/E;YAED,OAAO,QAAQ,CAAA;QACjB,CAAC;KAAA;CACF;AAnCD,kDAmCC","file":"subscription-service.js","sourcesContent":["import YouTube, { Subscription } from '..'\nimport { Cache } from '../util'\n\n/**\n * @ignore\n */\nexport class SubscriptionService {\n  /* istanbul ignore next */\n  public static async getSubscriptionByChannels (youtube: YouTube, subscriberId: string, channelId: string): Promise<Subscription> {\n    const cached = Cache.get(`sub_by_channels://\"${subscriberId}\"/\"${channelId}\"`)\n\n    if (youtube._shouldCache && cached) {\n      return cached\n    }\n\n    const data: {\n      part: string\n      forChannelId: string\n      channelId: string\n      maxResults: number\n    } = {\n      part: 'snippet,contentDetails,subscriberSnippet',\n      forChannelId: channelId,\n      channelId: subscriberId,\n      maxResults: 1\n    }\n\n    const results = await youtube._request.api('subscriptions', data, youtube.token, youtube.accessToken)\n\n    if (results.items.length === 0) {\n      return Promise.reject('Subscription not found')\n    }\n\n    const toReturn = new Subscription(youtube, results.items[0])\n\n    if (youtube._shouldCache && youtube._cacheSearches) {\n      youtube._cache(`sub_by_channels://\"${subscriberId}\"/\"${channelId}\"`, toReturn)\n    }\n\n    return toReturn\n  }\n}\n"],"sourceRoot":"../../src"}