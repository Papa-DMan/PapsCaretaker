"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionService = void 0;
const __1 = require("..");
const util_1 = require("../util");
/**
 * @ignore
 */
class SubscriptionService {
    /* istanbul ignore next */
    static getSubscriptionByChannels(youtube, subscriberId, channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            const cached = util_1.Cache.get(`sub_by_channels://"${subscriberId}"/"${channelId}"`);
            if (youtube._shouldCache && cached) {
                return cached;
            }
            const data = {
                part: 'snippet,contentDetails,subscriberSnippet',
                forChannelId: channelId,
                channelId: subscriberId,
                maxResults: 1
            };
            const results = yield youtube._request.api('subscriptions', data, youtube.token, youtube.accessToken);
            if (results.items.length === 0) {
                return Promise.reject('Subscription not found');
            }
            const toReturn = new __1.Subscription(youtube, results.items[0]);
            if (youtube._shouldCache && youtube._cacheSearches) {
                youtube._cache(`sub_by_channels://"${subscriberId}"/"${channelId}"`, toReturn);
            }
            return toReturn;
        });
    }
}
exports.SubscriptionService = SubscriptionService;

//# sourceMappingURL=subscription-service.js.map
