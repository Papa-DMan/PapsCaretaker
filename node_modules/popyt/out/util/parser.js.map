{"version":3,"sources":["../src/util/parser.ts"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["import { parse } from 'url'\nimport { ISODuration } from '../types'\n\n/**\n * @ignore\n */\nexport class Parser {\n  public static parseUrl (url: string): { video: string; playlist: string; channel: string } {\n    url = url.startsWith('https://www.') ? url :\n      (url.startsWith('www.') ? `https://${url}` :\n        (url.startsWith('https://') ? `${url.substring(0, 8)}www.${url.substring(8)}` : `https://www.${url}`))\n\n    const parsed = parse(url, true)\n\n    switch (parsed.hostname) {\n      case 'www.youtube.com':\n      case 'youtube.com':\n      case 'm.youtube.com': {\n        const idRegex = /^[a-zA-Z0-9-_]+$/\n\n        if (parsed.pathname === '/watch') {\n          if (!parsed.query.v || !idRegex.test(parsed.query.v as string)) {\n            return { video: null, playlist: null, channel: null }\n          }\n\n          const response: { video: string; playlist: string; channel: string } = { video: parsed.query.v as string, playlist: null, channel: null }\n\n          if (parsed.query.list) {\n            response.playlist = parsed.query.list as string\n          }\n\n          return response\n        } else if (parsed.pathname === '/playlist') {\n          if (!parsed.query.list || !idRegex.test(parsed.query.list as string)) {\n            return { video: null, playlist: null, channel: null }\n          }\n\n          return { playlist: parsed.query.list as string, video: null, channel: null }\n        } else if (parsed.pathname.startsWith('/channel/') || parsed.pathname.startsWith('/c/')) {\n          const id = parsed.pathname.replace('/channel/', '').replace('/c/', '')\n\n          if (!id || !idRegex.test(id)) {\n            return { video: null, playlist: null, channel: null }\n          }\n\n          return { channel: id, video: null, playlist: null }\n        }\n\n        return { video: null, playlist: null, channel: null }\n      }\n      case 'www.youtu.be':\n      case 'youtu.be':\n        return { video: /^\\/[a-zA-Z0-9-_]+$/.test(parsed.pathname) ? parsed.pathname.slice(1) : null, playlist: null, channel: null }\n      default:\n        return { video: null, playlist: null, channel: null }\n    }\n  }\n\n  public static parseIsoDuration (duration: string): ISODuration {\n    const numbers = '\\\\d+(?:[\\\\.,]\\\\d{0,3})?'\n    const weekPattern = `(${numbers}W)`\n    const datePattern = `(${numbers}Y)?(${numbers}M)?(${numbers}D)?`\n    const timePattern = `T(${numbers}H)?(${numbers}M)?(${numbers}S)?`\n    const iso8601 = `P(?:${weekPattern}|${datePattern}(?:${timePattern})?)`\n    const timeArray = [ 'weeks', 'years', 'months', 'days', 'hours', 'minutes', 'seconds' ]\n    const pattern = new RegExp(iso8601)\n\n    return duration.match(pattern).slice(1).reduce((prev, current, index) => {\n      prev[timeArray[index]] = parseFloat(current) || 0\n      return prev\n    }, { weeks: 0, years: 0, months: 0, days: 0, hours: 0, minutes: 0, seconds: 0 })\n  }\n}\n"],"sourceRoot":"../../src"}