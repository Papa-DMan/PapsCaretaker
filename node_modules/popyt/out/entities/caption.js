"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Caption = void 0;
/**
 * A caption track.
 */
class Caption {
    constructor(youtube, data) {
        this.youtube = youtube;
        this.data = data;
        this._init(data);
    }
    /**
     * @ignore
     */
    _init(data) {
        if (data.kind !== 'youtube#caption') {
            throw new Error(`Invalid caption type: ${data.kind}`);
        }
        const caption = data;
        this.id = caption.id;
        this.full = true;
        /* istanbul ignore next */
        if (caption.snippet) {
            this.videoId = caption.snippet.videoId;
            this.lastUpdated = new Date(caption.snippet.lastUpdated);
            this.kind = caption.snippet.trackKind;
            this.language = caption.snippet.language;
            this.name = caption.snippet.name;
            this.audioType = caption.snippet.audioTrackType;
            this.closedCaptions = caption.snippet.isCC;
            this.large = caption.snippet.isLarge;
            this.easyReader = caption.snippet.isEasyReader;
            this.draft = caption.snippet.isDraft;
            this.autoSynced = caption.snippet.isAutoSynced;
            this.status = caption.snippet.status;
            this.failureReason = caption.snippet.failureReason;
        }
        else {
            /* istanbul ignore next */
            this.full = false;
        }
    }
    /**
     * Fetches this caption and reassigns this object to the new caption object.
     * Only useful if `this.full` is false, or if you want updated caption info.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const caption = yield this.youtube.oauth.getCaption(this.videoId, this.id);
            return Object.assign(this, caption);
        });
    }
    /**
     * Updates this caption.
     * Must be using an access token with correct scopes.
     * @param track The modified caption track to upload.
     * @param draft Whether or not the track is a draft.
     */
    /* istanbul ignore next */
    update(track, draft = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const newCaption = yield this.youtube.oauth.updateCaption(this.id, track, draft);
            return Object.assign(this, Object.assign(Object.assign({}, newCaption), { full: true }));
        });
    }
    /**
     * Downloads this caption's track.
     * Must be using an access token with correct scopes.
     * @param format The file format to download the track in.
     * @param language The language to download the track in.
     */
    /* istanbul ignore next */
    download(format, language) {
        return this.youtube.oauth.downloadCaption(this.id, format, language);
    }
    /**
     * Deletes the caption.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    delete() {
        return this.youtube.oauth.deleteCaption(this.id);
    }
}
exports.Caption = Caption;
/**
 * The name of the endpoint used for this entity.
 */
Caption.endpoint = 'i18nRegions';
/**
 * The parts to request for this entity.
 */
Caption.part = 'snippet';
/**
 * The fields to request for this entity.
 */
Caption.fields = 'items(kind,id,snippet(*))';

//# sourceMappingURL=caption.js.map
