{"version":3,"sources":["../src/entities/caption.ts"],"names":[],"mappings":"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","file":"caption.js","sourcesContent":["import YouTube, { ISODuration } from '..'\nimport { Parser } from '../util'\n\n/**\n * A caption track.\n */\nexport class Caption {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'i18nRegions'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet'\n\n  /**\n   * The fields to request for this entity.\n   */\n  public static fields = 'items(kind,id,snippet(*))'\n\n  /**\n   * The YouTube object that created this caption track object.\n   */\n  public youtube: YouTube\n\n  /**\n   * Whether or not this is a full caption track object.\n   */\n  public full: boolean\n\n  /**\n   * The raw data of this caption track.\n   */\n  public data: any\n\n  /**\n   * The ID of this caption track.\n   */\n  public id: string\n\n  /**\n   * The ID of the [[Video]] that this caption track is for.\n   */\n  public videoId: string\n\n  /**\n   * When this caption track was last updated.\n   */\n  public lastUpdated: Date\n\n  /**\n   * The kind of caption track this is (automatic speech recognition, forced due to foreign language, or standard).\n   */\n  public kind: 'ASR' | 'forced' | 'standard'\n\n  /**\n   * The language that this caption track is written in.\n   */\n  public language: string\n\n  /**\n   * The name of this caption track.\n   */\n  public name: string\n\n  /**\n   * Whether the audio is a commentary/descriptive (alternate audio tracks), the primary audio track, or unknown.\n   */\n  public audioType: 'commentary' | 'descriptive' | 'primary' | 'unknown'\n\n  /**\n   * Whether or not this caption track is for the deaf/hard of hearing.\n   */\n  public closedCaptions: boolean\n\n  /**\n   * Whether or not this caption track uses large text for the vision-impaired.\n   */\n  public large: boolean\n\n  /**\n   * Whether or not this caption track is written at a third-grade level (for language learners).\n   */\n  public easyReader: boolean\n\n  /**\n   * Whether or not this caption track is a draft. If so, it won't be shown to users.\n   */\n  public draft: boolean\n\n  /**\n   * Whether or not this caption track has been autosynced to the audio by YouTube.\n   */\n  public autoSynced: boolean\n\n  /**\n   * The processing status of the caption track.\n   */\n  public status: 'failed' | 'serving' | 'syncing'\n\n  /**\n   * If [[Caption#status]] is `failed`, then this is populated with the reason failure.\n   */\n  // Must fail for this property to be populated\n  /* istanbul ignore next */\n  public failureReason?: 'processingFailed' | 'unknownFormat' | 'unsupportedFormat'\n\n  constructor (youtube: YouTube, data: any) {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data)\n  }\n\n  /**\n   * @ignore\n   */\n  private _init (data: any) {\n    if (data.kind !== 'youtube#caption') {\n      throw new Error(`Invalid caption type: ${data.kind}`)\n    }\n\n    const caption = data\n\n    this.id = caption.id\n    this.full = true\n\n    /* istanbul ignore next */\n    if (caption.snippet) {\n      this.videoId = caption.snippet.videoId\n      this.lastUpdated = new Date(caption.snippet.lastUpdated)\n      this.kind = caption.snippet.trackKind\n      this.language = caption.snippet.language\n      this.name = caption.snippet.name\n      this.audioType = caption.snippet.audioTrackType\n      this.closedCaptions = caption.snippet.isCC\n      this.large = caption.snippet.isLarge\n      this.easyReader = caption.snippet.isEasyReader\n      this.draft = caption.snippet.isDraft\n      this.autoSynced = caption.snippet.isAutoSynced\n      this.status = caption.snippet.status\n      this.failureReason = caption.snippet.failureReason\n    } else {\n      /* istanbul ignore next */\n      this.full = false\n    }\n  }\n\n  /**\n   * Fetches this caption and reassigns this object to the new caption object.\n   * Only useful if `this.full` is false, or if you want updated caption info.\n   * Must be using an access token with correct scopes.\n   */\n  /* istanbul ignore next */\n  public async fetch () {\n    const caption = await this.youtube.oauth.getCaption(this.videoId, this.id)\n    return Object.assign(this, caption)\n  }\n\n  /**\n   * Updates this caption.\n   * Must be using an access token with correct scopes.\n   * @param track The modified caption track to upload.\n   * @param draft Whether or not the track is a draft.\n   */\n  /* istanbul ignore next */\n  public async update (track?: Buffer, draft: boolean = null): Promise<Caption> {\n    const newCaption = await this.youtube.oauth.updateCaption(this.id, track, draft)\n    return Object.assign(this, { ...newCaption, full: true })\n  }\n\n  /**\n   * Downloads this caption's track.\n   * Must be using an access token with correct scopes.\n   * @param format The file format to download the track in.\n   * @param language The language to download the track in.\n   */\n  /* istanbul ignore next */\n  public download (format?: 'sbv' | 'scc' | 'srt' | 'ttml' | 'vtt', language?: string) {\n    return this.youtube.oauth.downloadCaption(this.id, format, language)\n  }\n\n  /**\n   * Deletes the caption.\n   * Must be using an access token with correct scopes.\n   */\n  /* istanbul ignore next */\n  public delete () {\n    return this.youtube.oauth.deleteCaption(this.id)\n  }\n}\n"],"sourceRoot":"../../src"}