"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Playlist = void 0;
const __1 = require("..");
const services_1 = require("../services");
/**
 * A YouTube playlist.
 */
class Playlist {
    constructor(youtube, data) {
        this.youtube = youtube;
        this.data = data;
        this._init(data);
    }
    /**
     * @ignore
     */
    _init(data) {
        if (data.kind === 'youtube#playlist') {
            const playlist = data;
            this.id = playlist.id;
            /* istanbul ignore next */
            this.tags = playlist.snippet ? playlist.snippet.tags : undefined;
            /* istanbul ignore next */
            this.length = playlist.contentDetails ? playlist.contentDetails.itemCount : undefined;
            /* istanbul ignore next */
            this.embedHtml = playlist.player ? playlist.player.embedHtml : undefined;
        }
        else if (data.kind === 'youtube#searchResult') {
            this.full = false;
            this.id = data.id.playlistId;
        }
        else {
            throw new Error(`Invalid playlist type: ${data.kind}`);
        }
        /* istanbul ignore next */
        if (data.snippet) {
            this.tags = data.snippet.tags;
            this.title = data.snippet.title;
            this.description = data.snippet.description;
            this.creatorId = data.snippet.channelId;
            this.dateCreated = new Date(data.snippet.publishedAt);
            this.thumbnails = data.snippet.thumbnails;
        }
        else {
            this.full = false;
        }
        this.url = `https://youtube.com/playlist?list=${this.id}`;
    }
    /**
     * Adds videos in this playlist to the `videos` property of this playlist.
     * @param maxResults Fetches all videos if <=0.
     */
    fetchVideos(maxResults = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            this.videos = yield this.youtube.getPlaylistItems(this.id, maxResults);
            return this.videos;
        });
    }
    /**
     * Fetches this playlist and reassigns this object to the new playlist object.
     * Only useful if `this.full` is false, or if you want updated playlist info.
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const playlist = yield this.youtube.getPlaylist(this.id);
            return Object.assign(this, playlist);
        });
    }
    /**
     * Edits the playlist.
     * Must be using an access token with correct scopes.
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * @param title A title for the playlist.
     * @param description A description of the playlist.
     * @param privacy Whether the video is private, public, or unlisted.
     * @param tags Tags pertaining to the playlist.
     * @param language The language of the playlist's default title and description.
     * @param localizations Translated titles and descriptions.
     */
    /* istanbul ignore next */
    update(title, description, privacy, tags, language, localizations) {
        return __awaiter(this, void 0, void 0, function* () {
            const newPlaylist = yield this.youtube.oauth.updatePlaylist(this.id, title, description, privacy, tags, language, localizations);
            return Object.assign(this, Object.assign(Object.assign({}, newPlaylist), { full: true }));
        });
    }
    /**
     * Adds a [[Video]] to the playlist.
     * Must be using an access token with correct scopes.
     * @param videoResolvable The URL, ID, or Title of the video.
     * @param position The zero-based position to insert the video in.
     * @param note A note on the video.
     */
    /* istanbul ignore next */
    addVideo(videoResolvable, position, note) {
        return __awaiter(this, void 0, void 0, function* () {
            const videoId = yield services_1.GenericService.getId(this.youtube, videoResolvable, __1.Video);
            const video = yield this.youtube.oauth.addPlaylistItem(this.id, videoId, position, note);
            if (this.videos) {
                this.videos.push(video);
            }
            else {
                this.videos = [video];
            }
            return video;
        });
    }
    /**
     * Updates a [[Video]] in the playlist.
     * Must be using an access token with correct scopes.
     * @param videoResolvable The URL, ID, or Title of the video.
     * @param position The zero-based position to move the video to.
     * @param note A new note on the video.
     * @param itemId The playlist item ID if you have it.
     */
    /* istanbul ignore next */
    updateVideo(videoResolvable, position, note, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            const videoId = yield services_1.GenericService.getId(this.youtube, videoResolvable, __1.Video);
            const playlistItemId = itemId ? itemId : (yield services_1.GenericService.getPaginatedItems(this.youtube, 'playlistItems', false, this.id, 1, videoId))[0].id;
            return this.youtube.oauth.updatePlaylistItem(playlistItemId, this.id, videoId, position, note);
        });
    }
    /**
     * Removes a [[Video]] from the playlist.
     * Must be using an access token with correct scopes.
     * @param videoResolvable The URL, ID, or Title of the video. Must specify this or `itemId`.
     * @param itemId The playlist item ID if you have it. Must specify this or `videoResolvable`.
     */
    /* istanbul ignore next */
    removeVideo(videoResolvable, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!videoResolvable && !itemId) {
                return Promise.reject('Must specify either videoResolvable or itemId');
            }
            const playlistItemId = itemId ? itemId : (yield services_1.GenericService.getPaginatedItems(this.youtube, 'playlistItems', false, this.id, 1, yield services_1.GenericService.getId(this.youtube, videoResolvable, __1.Video)))[0].id;
            yield this.youtube.oauth.deletePlaylistItem(playlistItemId);
            if (this.videos) {
                const index = this.videos.findIndex(v => v.data.id === playlistItemId);
                if (index) {
                    this.videos.splice(index, 1);
                }
            }
        });
    }
    /**
     * Deletes the playlist.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    delete() {
        return this.youtube.oauth.deletePlaylist(this.id);
    }
}
exports.Playlist = Playlist;
/**
 * The name of the endpoint used for this entity.
 */
Playlist.endpoint = 'playlists';
/**
 * The parts to request for this entity.
 */
Playlist.part = 'snippet,contentDetails,player';
/**
 * The fields to request for this entity.
 */
Playlist.fields = 'items(kind,id,snippet(tags,title,description,channelId,publishedAt,thumbnails),contentDetails(itemCount),player(embedHtml))';

//# sourceMappingURL=playlist.js.map
