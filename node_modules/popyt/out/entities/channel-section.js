"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelSection = void 0;
/**
 * A YouTube channel section.
 */
class ChannelSection {
    constructor(youtube, data) {
        this.youtube = youtube;
        this.data = data;
        this._init(data);
    }
    /**
     * @ignore
     */
    _init(data) {
        if (data.kind !== 'youtube#channelSection') {
            throw new Error(`Invalid channel section type: ${data.kind}`);
        }
        const section = data;
        this.id = section.id;
        /* istanbul ignore next */
        if (section.snippet) {
            this.type = section.snippet.type;
            this.channelId = section.snippet.channelId;
            this.name = section.snippet.title;
            this.position = section.snippet.position;
            this.language = section.snippet.defaultLanguage;
            this.style = section.snippet.style;
            /* istanbul ignore next */
            this.localizedName = section.snippet.localized ? section.snippet.localized.title : undefined;
        }
        else {
            this.full = false;
        }
        /* istanbul ignore next */
        if (section.contentDetails) {
            this.playlistIds = section.contentDetails.playlists;
            this.channelIds = section.contentDetails.channels;
        }
        else {
            this.full = false;
        }
        /* istanbul ignore next */
        if (section.localizations) {
            this.localizations = section.localizations;
        }
        else {
            this.full = false;
        }
        /* istanbul ignore next */
        if (section.targeting) {
            this.targeting = section.targeting;
        }
        else {
            this.full = false;
        }
    }
    /**
     * Fetches this channel section and reassigns this object to the new channel section object.
     * Only useful if `this.full` is false, or if you want updated channel section info.
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const section = yield this.youtube.getChannelSection(this.id);
            return Object.assign(this, section);
        });
    }
    /**
     * Fetches the channel section's playlists and assigns them to the [[ChannelSection#playlists]] property.
     */
    fetchPlaylists() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.playlistIds) {
                return;
            }
            const playlists = [];
            for (let i = 0; i < this.playlistIds.length; i++) {
                playlists.push(yield this.youtube.getPlaylist(this.playlistIds[i]));
            }
            this.playlists = playlists;
            return this.playlists;
        });
    }
    /**
     * Fetches the channel section's playlists and assigns them to the [[ChannelSection#playlists]] property.
     */
    fetchChannels() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.channelIds) {
                return;
            }
            const channels = [];
            for (let i = 0; i < this.channelIds.length; i++) {
                channels.push(yield this.youtube.getChannel(this.channelIds[i]));
            }
            this.channels = channels;
            return this.channels;
        });
    }
}
exports.ChannelSection = ChannelSection;
/**
 * The name of the endpoint used for this entity.
 */
ChannelSection.endpoint = 'channelSections';
/**
 * The parts to request for this entity.
 */
ChannelSection.part = 'snippet,contentDetails,localizations,targeting';
/**
 * The fields to request for this entity.
 */
ChannelSection.fields = 'items(kind,id,contentDetails,localizations,snippet,targeting)';

//# sourceMappingURL=channel-section.js.map
