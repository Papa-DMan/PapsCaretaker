"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = void 0;
/**
 * A YouTube subscription.
 */
class Subscription {
    constructor(youtube, data) {
        this.youtube = youtube;
        this.data = data;
        this._init(data);
    }
    /**
     * @ignore
     */
    _init(data) {
        if (data.kind !== 'youtube#subscription') {
            throw new Error(`Invalid subscription type: ${data.kind}`);
        }
        const subscription = data;
        this.id = subscription.id;
        this.full = true;
        /* istanbul ignore next */
        if (subscription.snippet) {
            this.dateSubscribed = new Date(subscription.snippet.publishedAt);
            this.channel = {
                name: subscription.snippet.channelTitle || subscription.snippet.title,
                id: subscription.snippet.resourceId.channelId
            };
            this.title = subscription.snippet.title;
            this.description = subscription.snippet.description;
            this.subscriber = {
                id: subscription.snippet.channelId,
                name: null,
                description: null,
                thumbnails: null
            };
            this.thumbnails = subscription.snippet.thumbnails;
        }
        else {
            /* istanbul ignore next */
            this.full = false;
        }
        if (subscription.contentDetails) {
            this.items = {
                new: subscription.contentDetails.newItemCount,
                total: subscription.contentDetails.totalItemCount
            };
            this.activities = subscription.contentDetails.activityType;
        }
        else {
            this.full = false;
        }
        if (subscription.subscriberSnippet) {
            this.subscriber.name = subscription.subscriberSnippet.title;
            this.subscriber.description = subscription.subscriberSnippet.description;
            this.subscriber.thumbnails = subscription.subscriberSnippet.thumbnails;
        }
        else {
            this.full = false;
        }
    }
    /**
     * Fetches this subscription and reassigns this object to the new subscription object.
     * Only useful if `this.full` is false, or if you want updated subscription info.
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            let subscription = yield this.youtube.getSubscription(this.id).catch((e) => e);
            /* istanbul ignore next */
            if (typeof subscription === 'string') {
                subscription = yield this.youtube.getSubscriptionByChannels(this.subscriber.id, this.channel.id).catch(e => e);
            }
            return Object.assign(this, subscription);
        });
    }
}
exports.Subscription = Subscription;
/**
 * The name of the endpoint used for this entity.
 */
Subscription.endpoint = 'subscriptions';
/**
 * The parts to request for this entity.
 */
Subscription.part = 'snippet,contentDetails,subscriberSnippet';
/**
 * The fields to request for this entity.
 */
Subscription.fields = 'items(kind,id,snippet(publishedAt,title,channelTitle,description,resourceId(channelId),channelId,thumbnails),' +
    'contentDetails(newItemCount,totalItemCount,activityType),subscriberSnippet(title,description,thumbnails))';

//# sourceMappingURL=subscription.js.map
