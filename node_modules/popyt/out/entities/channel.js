"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Channel = void 0;
/**
 * A YouTube channel.
 */
class Channel {
    constructor(youtube, data) {
        this.youtube = youtube;
        this.data = data;
        this._init(data);
    }
    /**
     * @ignore
     */
    _init(data) {
        /* istanbul ignore next */
        if (data.kind === 'youtube#channel' && (!data.status || data.status.isLinked)) {
            const channel = data;
            this.id = channel.id;
            /* istanbul ignore next */
            if (channel.snippet) {
                this.country = channel.snippet.country;
                this.language = channel.snippet.defaultLanguage;
            }
            else {
                this.full = false;
            }
            /* istanbul ignore next */
            if (channel.statistics) {
                this.views = Number(channel.statistics.viewCount);
                this.commentCount = Number(channel.statistics.commentCount);
                if (!channel.statistics.hiddenSubscriberCount) {
                    this.subCount = Number(channel.statistics.subscriberCount);
                }
                else {
                    this.subCount = -1;
                }
            }
            else {
                this.full = false;
            }
            if (channel.status) {
                this.kids = {
                    madeForKids: channel.status.madeForKids,
                    selfDeclaredMadeForKids: channel.status.selfDeclaredMadeForKids
                };
            }
            else {
                this.full = false;
            }
            /* istanbul ignore next */
            if (channel.brandingSettings) {
                this.banners = channel.brandingSettings.image;
                // Unknown behavior
                /* istanbul ignore next */
                if (channel.brandingSettings.channel) {
                    this.keywords = [];
                    if (channel.brandingSettings.channel.keywords) {
                        // Split by spaces but keep quotations intact
                        const broken = channel.brandingSettings.channel.keywords.split(/( )(?=(?:[^"]*"[^"]*")*[^"]*$)/i);
                        for (let i = 0; i < broken.length; i++) {
                            if (i % 2 === 0) {
                                this.keywords.push(broken[i].replace(/(^"|"$)/gi, ''));
                            }
                        }
                    }
                    // Broken for many channels
                    /* istanbul ignore next */
                    this.featuredChannels = channel.brandingSettings.channel.featuredChannelsUrls ?
                        channel.brandingSettings.channel.featuredChannelsUrls.map(id => `https://www.youtube.com/channel/${id}`) : [];
                }
            }
            else {
                this.full = false;
            }
        }
        else if (data.kind === 'youtube#searchResult') {
            this.full = false;
            this.id = data.id.channelId;
            /* istanbul ignore next */
            if (data.snippet) {
                // Impossible to test
                /* istanbul ignore next */
                this.liveStatus = data.snippet.liveBroadcastContent !== 'none' ? data.snippet.liveBroadcastContent : false;
            }
        }
        else {
            throw new Error(`Invalid channel type: ${data.kind}`);
        }
        /* istanbul ignore next */
        if (data.snippet) {
            this.profilePictures = data.snippet.thumbnails;
            this.dateCreated = new Date(data.snippet.publishedAt);
            this.name = data.snippet.title;
            this.about = data.snippet.description;
        }
        else {
            this.full = false;
        }
        this.url = `https://youtube.com/channel/${this.id}`;
    }
    /**
     * Posts a comment on the channel's discussion tab.
     * Must be using an access token with correct scopes.
     * @param text The text of the comment.
     */
    /* istanbul ignore next */
    postComment(text) {
        return __awaiter(this, void 0, void 0, function* () {
            const comment = yield this.youtube.oauth.postComment(text, this.id);
            if (this.comments !== undefined) {
                this.comments.push(comment);
            }
            else {
                this.comments = [comment];
            }
            return comment;
        });
    }
    /**
     * Fetches this channel and reassigns this object to the new channel object.
     * Only useful if `this.full` is false, or if you want updated channel info.
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const channel = yield this.youtube.getChannel(this.id);
            return Object.assign(this, channel);
        });
    }
    /**
     * Fetches the channel's videos and assigns them to the `Channel#videos` property.
     */
    fetchVideos() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(this.data.contentDetails)) {
                yield this.fetch();
            }
            const videos = yield this.youtube.getPlaylist(this.data.contentDetails.relatedPlaylists.uploads);
            this.videos = videos;
            return this.videos;
        });
    }
    /**
     * Fetches the channel's discussion tab comments and assigns them to Channel#comments.
     * @param maxResults The maximum amount of comments to fetch
     */
    fetchComments(maxResults = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            this.comments = yield this.youtube.getChannelComments(this.id, maxResults);
            return this.comments;
        });
    }
    /**
     * Fetches the channel's playlists and assigns them to Channel#playlists.
     * @param maxResults The maximum amount of playlists to fetch
     */
    fetchPlaylists(maxResults = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            this.playlists = yield this.youtube.getChannelPlaylists(this.id, maxResults);
            return this.playlists;
        });
    }
    /**
     * Fetches the channel's subscriptions and assigns them to Channel#subscriptions.
     * @param maxResults The maximum amount of subscriptions to fetch
     */
    /* istanbul ignore next */
    fetchSubscriptions(maxResults = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            this.subscriptions = yield this.youtube.getChannelSubscriptions(this.id, maxResults);
            return this.subscriptions;
        });
    }
    /**
     * Fetches the channel's sections and assigns them to [[Channel#sections]].
     */
    fetchSections() {
        return __awaiter(this, void 0, void 0, function* () {
            this.sections = yield this.youtube.getChannelSections(this.id);
            return this.sections;
        });
    }
    /**
     * Subscribes to the channel.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    subscribe() {
        return this.youtube.oauth.subscribeToChannel(this.id);
    }
    /**
     * Unsubscribes from the channel.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    unsubscribe() {
        return this.youtube.oauth.unsubscribeFromChannel(this.id);
    }
    /**
     * Updates the channel's branding settings.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    updateBranding(branding) {
        return this.youtube.oauth.updateChannelBranding(this.id, branding);
    }
    /**
     * Updates the channel's localizations.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    updateLocalizations(localizations) {
        return this.youtube.oauth.updateChannelLocalizations(this.id, localizations);
    }
    /**
     * Sets whether or not the channel is made for kids.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    setMadeForKids(madeForKids) {
        return this.youtube.oauth.setChannelMadeForKids(this.id, madeForKids);
    }
    /**
     * Sets the channel's watermark.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    setWatermark(type, offset, duration, image, imageType) {
        return this.youtube.oauth.setChannelWatermark(this.id, type, offset, duration, image, imageType);
    }
    /**
     * Unsets the channel's watermark.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    unsetWatermark() {
        return this.youtube.oauth.unsetChannelWatermark(this.id);
    }
    /**
     * Uploads and sets the channel's banner.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    setBanner(image) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.data.brandingSettings) {
                yield this.fetch();
            }
            if (!this.data.brandingSettings) {
                return Promise.reject('Unable to fetch channel branding settings');
            }
            if (!this.data.brandingSettings.image) {
                this.data.brandingSettings.image = {};
            }
            this.data.brandingSettings.image.bannerExternalUrl = yield this.youtube.oauth.uploadChannelBanner(image);
            return this.youtube.oauth.updateChannelBranding(this.id, this.data.brandingSettings);
        });
    }
}
exports.Channel = Channel;
/**
 * The name of the endpoint used for this entity.
 */
Channel.endpoint = 'channels';
/**
 * The parts to request for this entity.
 */
Channel.part = 'snippet,contentDetails,statistics,status,brandingSettings';
/**
 * The fields to request for this entity.
 */
Channel.fields = 'items(kind,id,contentDetails(relatedPlaylists(uploads)),statistics(subscriberCount,commentCount,viewCount,hiddenSubscriberCount),' +
    'snippet(title,description,thumbnails,publishedAt,country,defaultLanguage),brandingSettings(image,channel(keywords,featuredChannelsUrls)),' +
    'status(isLinked,madeForKids,selfDeclaredMadeForKids))';

//# sourceMappingURL=channel.js.map
