{"version":3,"sources":["../src/entities/comment.ts"],"names":[],"mappings":"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","file":"comment.js","sourcesContent":["import { YouTube } from '..'\n\nexport class YTComment {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'comments'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet'\n\n  /**\n   * The fields to request for this entity.\n   */\n  public static fields = 'items(kind,id,' +\n    'snippet(authorDisplayName,authorProfileImageUrl,authorChannelId,authorChannelUrl,textDisplay,textOriginal,parentId,videoId,channelId,canRate,likeCount,publishedAt,updatedAt))'\n\n  /**\n   * The YouTube object used to create the comment.\n   */\n  public youtube: YouTube\n\n  /**\n   * The raw data from the YouTube API of the comment.\n   */\n  public data: any\n\n  /**\n   * The comment's unique YouTube ID.\n   */\n  public id: string\n\n  /**\n   * Whether or not this a full comment object.\n   */\n  public full: boolean\n\n  /**\n   * The comment's author.\n   */\n  public author: {\n    /**\n     * The author's YouTube username. May not be unique.\n     */\n    username: string\n\n    /**\n     * The author's avatar URL.\n     */\n    avatar: string\n\n    /**\n     * The author's channel ID.\n     */\n    channelId: string\n\n    /**\n     * The author's channel URL.\n     */\n    channelUrl: string\n  }\n\n  /**\n   * The comment's content.\n   */\n  public text: {\n    /**\n     * What YouTube displays to the user viewing the comment.\n     */\n    displayed: string\n    /**\n     * The comment's plain text.\n     */\n    original: string\n  }\n\n  /**\n   * Whether or not you can like/dislike the comment.\n   */\n  public rateable: boolean\n\n  /**\n   * Either YouTube thinks it's popular, or it has at least 100 likes.\n   */\n  public popular: boolean\n\n  /**\n   * The number of likes the comment has received.\n   */\n  public likes: number\n\n  /**\n   * The url of the comment.\n   */\n  public url?: string\n\n  /**\n   * The date the comment was published.\n   */\n  public datePublished: Date\n\n  /**\n   * Either the date the comment was last edited, or the date it was\n   * posted.\n   */\n  public dateEdited: Date\n\n  /**\n   * Either the ID of the video that it is commenting on, the ID of the\n   * comment it is replying to, or the ID of the channel it is commenting\n   * on.\n   * Undefined whenever the comment is fetched directly using the ID.\n   */\n  public parentId: string\n\n  /**\n   * Replies directed to the comment. If the comment was fetched from a video,\n   * then this will be partially filled. You'll need to use Comment#fetchReplies\n   * to get all of the replies, though.\n   */\n  public replies: YTComment[]\n\n  constructor (youtube: YouTube, data: any, type: 'video' | 'channel') {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data, type)\n  }\n\n  /**\n   * @ignore\n   */\n  private _init (data: any, type: 'video' | 'channel') {\n    if (data.kind !== 'youtube#comment') {\n      throw new Error(`Invalid comment type: ${data.kind}`)\n    }\n\n    const comment = data\n\n    /* istanbul ignore next */\n    if (comment.snippet) {\n      this.author = {\n        username: comment.snippet.authorDisplayName,\n        avatar: comment.snippet.authorProfileImageUrl,\n        channelId: comment.snippet.authorChannelId.value,\n        channelUrl: comment.snippet.authorChannelUrl\n      }\n      this.text = {\n        displayed: comment.snippet.textDisplay,\n        original: comment.snippet.textOriginal\n      }\n      this.rateable = comment.snippet.canRate\n      this.popular = comment.snippet.likeCount >= 100\n      this.likes = comment.snippet.likeCount\n      this.datePublished = comment.snippet.publishedAt\n      this.dateEdited = comment.snippet.updatedAt\n      this.parentId = comment.snippet.parentId ? comment.snippet.parentId : comment.snippet.videoId ? comment.snippet.videoId : comment.snippet.channelId\n    } else {\n      this.full = false\n    }\n\n    this.id = comment.id\n\n    if (this.parentId) {\n      this.url = 'https://youtube.com/' + (type === 'channel' ? `channel/${this.parentId}/discussion?lc=${this.id}` : `watch?v=${this.parentId}&lc=${this.id}`)\n    }\n\n    this.replies = []\n  }\n\n  /**\n   * Fetches replies to the comment.\n   * @param maxResults The maximum amount of replies to fetch. Fetches all comments if <=0.\n   */\n  public async fetchReplies (maxResults: number = 10) {\n    this.replies = await this.youtube.getCommentReplies(this.id, maxResults)\n    return this.replies\n  }\n\n  /**\n   * Edits the comment.\n   * Must be using an access token with correct scopes.\n   * @param text The new text of the comment.\n   */\n  /* istanbul ignore next */\n  public edit (text: string) {\n    if (this.data.snippet.parentId) {\n      return this.youtube.oauth.editCommentReply(this.id, text)\n    }\n\n    return this.youtube.oauth.editComment(text, this.id)\n  }\n\n  /**\n   * Replies to the comment.\n   * Must be using an access token with correct scopes.\n   * @param text The text of the reply.\n   */\n  /* istanbul ignore next */\n  public reply (text: string) {\n    return this.youtube.oauth.replyToComment(this.id, text)\n  }\n\n  /**\n   * Marks the comment as spam.\n   * Must be using an access token with correct scopes.\n   */\n  /* istanbul ignore next */\n  public markAsSpam () {\n    return this.youtube.oauth.markCommentAsSpam(this.id)\n  }\n\n  /**\n   * Sets the comment's moderation status.\n   * Must be using an access token with correct scopes.\n   * @param status The status to set the comment to.\n   * @param banAuthor Whether or not to ban the author of the comment from commenting again.\n   * Defaults to false.\n   */\n  /* istanbul ignore next */\n  public setModerationStatus (status?: 'heldForReview' | 'published' | 'rejected', banAuthor: boolean = false) {\n    return this.youtube.oauth.setCommentModerationStatus(this.id, status, banAuthor)\n  }\n\n  /**\n   * Deletes the comment.\n   * Must be using an access token with correct scopes.\n   */\n  /* istanbul ignore next */\n  public delete () {\n    return this.youtube.oauth.deleteComment(this.id)\n  }\n}\n"],"sourceRoot":"../../src"}