{"version":3,"sources":["../src/entities/subscription.ts"],"names":[],"mappings":"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","file":"subscription.js","sourcesContent":["import YouTube from '..'\nimport { Thumbnail } from '../types'\n\n/**\n * A YouTube subscription.\n */\nexport class Subscription {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'subscriptions'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet,contentDetails,subscriberSnippet'\n\n  /**\n   * The fields to request for this entity.\n   */\n  public static fields = 'items(kind,id,snippet(publishedAt,title,channelTitle,description,resourceId(channelId),channelId,thumbnails),' +\n    'contentDetails(newItemCount,totalItemCount,activityType),subscriberSnippet(title,description,thumbnails))'\n\n  /**\n   * The YouTube object that created this subscription object.\n   */\n  public youtube: YouTube\n\n  /**\n   * Whether or not this is a full subscription object.\n   */\n  public full: boolean\n\n  /**\n   * The raw data of this subscription.\n   */\n  public data: any\n\n  /**\n   * The ID of this subscription.\n   */\n  public id: string\n\n  /**\n   * The date that the user subscribed to the channel on.\n   */\n  public dateSubscribed: Date\n\n  /**\n   * Information on the [[Channel]] that the user subscribed to.\n   */\n  public channel: {\n    /**\n     * The ID of the channel.\n     */\n    id: string\n\n    /**\n     * The name of the channel.\n     */\n    name: string\n  }\n\n  /**\n   * The title of the subscription.\n   */\n  public title: string\n\n  /**\n   * The details of the subscription.\n   */\n  public description: string\n\n  /**\n   * Information on the user that subscribed to the channel.\n   */\n  public subscriber: {\n    /**\n     * The user's ID.\n     */\n    id: string\n\n    /**\n     * The user's username.\n     */\n    name: string\n\n    /**\n     * The user's description.\n     */\n    description: string\n\n    /**\n     * Thumbnail images for the user's channel.\n     */\n    thumbnails: {\n      default: Thumbnail\n      medium: Thumbnail\n      high: Thumbnail\n    }\n  }\n\n  /**\n   * Thumbnail images for the subscription.\n   */\n  public thumbnails: {\n    default: Thumbnail\n    medium: Thumbnail\n    high: Thumbnail\n  }\n\n  /**\n   * Statistics on the items that the subscription points to.\n   */\n  public items: {\n    /**\n     * The number of new items in the subscription.\n     */\n    new: number\n\n    /**\n     * The total number of items that the subscription points to.\n     */\n    total: number\n  }\n\n  /**\n   * The activities that the user has subscribed to.\n   */\n  public activities: 'all' | 'uploads'\n\n  constructor (youtube: YouTube, data: any) {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data)\n  }\n\n  /**\n   * @ignore\n   */\n  private _init (data: any) {\n    if (data.kind !== 'youtube#subscription') {\n      throw new Error(`Invalid subscription type: ${data.kind}`)\n    }\n\n    const subscription = data\n\n    this.id = subscription.id\n    this.full = true\n\n    /* istanbul ignore next */\n    if (subscription.snippet) {\n      this.dateSubscribed = new Date(subscription.snippet.publishedAt)\n      this.channel = {\n        name: subscription.snippet.channelTitle || subscription.snippet.title,\n        id: subscription.snippet.resourceId.channelId\n      }\n      this.title = subscription.snippet.title\n      this.description = subscription.snippet.description\n      this.subscriber = {\n        id: subscription.snippet.channelId,\n        name: null,\n        description: null,\n        thumbnails: null\n      }\n      this.thumbnails = subscription.snippet.thumbnails\n    } else {\n      /* istanbul ignore next */\n      this.full = false\n    }\n\n    if (subscription.contentDetails) {\n      this.items = {\n        new: subscription.contentDetails.newItemCount,\n        total: subscription.contentDetails.totalItemCount\n      }\n      this.activities = subscription.contentDetails.activityType\n    } else {\n      this.full = false\n    }\n\n    if (subscription.subscriberSnippet) {\n      this.subscriber.name = subscription.subscriberSnippet.title\n      this.subscriber.description = subscription.subscriberSnippet.description\n      this.subscriber.thumbnails = subscription.subscriberSnippet.thumbnails\n    } else {\n      this.full = false\n    }\n  }\n\n  /**\n   * Fetches this subscription and reassigns this object to the new subscription object.\n   * Only useful if `this.full` is false, or if you want updated subscription info.\n   */\n  public async fetch () {\n    let subscription = await this.youtube.getSubscription(this.id).catch((e: string) => e)\n\n    /* istanbul ignore next */\n    if (typeof subscription === 'string') {\n      subscription = await this.youtube.getSubscriptionByChannels(this.subscriber.id, this.channel.id).catch(e => e)\n    }\n\n    return Object.assign(this, subscription)\n  }\n}\n"],"sourceRoot":"../../src"}