{"version":3,"sources":["../src/entities/channel-section.ts"],"names":[],"mappings":"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","file":"channel-section.js","sourcesContent":["import { YouTube, Playlist, Channel, ChannelSectionType } from '..'\n\n/**\n * A YouTube channel section.\n */\nexport class ChannelSection {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'channelSections'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet,contentDetails,localizations,targeting'\n\n  /**\n   * The fields to request for this entity.\n   */\n  public static fields = 'items(kind,id,contentDetails,localizations,snippet,targeting)'\n\n  /**\n   * The YouTube object that created this channel section object.\n   */\n  public youtube: YouTube\n\n  /**\n   * Whether or not this a full channel section object.\n   */\n  public full: boolean\n\n  /**\n   * The raw data of this channel section.\n   */\n  public data: any\n\n  /**\n   * The name of this channel section.\n   */\n  public name: string\n\n  /**\n   * The type of this channel section.\n   */\n  public type: ChannelSectionType\n\n  /**\n   * The style of this channel section.\n   */\n  public style: 'horizontalRow' | 'verticalList'\n\n  /**\n   * The ID of the channel that created this channel section.\n   */\n  public channelId: string\n\n  /**\n   * The zero-based position of this channel section on the channel page.\n   */\n  public position: number\n\n  /**\n   * The language of the title of this channel section.\n   */\n  public language: string\n\n  /**\n   * The localized name of this channel section if the `hl` parameter was used when fetching it.\n   */\n  public localizedName: string\n\n  /**\n   * The IDs of the playlists in this channel section. Undefined if there aren't any.\n   */\n  public playlistIds?: string[]\n\n  /**\n   * The IDs of the channels in this channel section. Undefined if there aren't any.\n   */\n  public channelIds?: string[]\n\n  /**\n   * The localizations of the channel section.\n   */\n  public localizations?: {\n    /**\n     * The language of the localized title. A [BCP-47](http://www.rfc-editor.org/rfc/bcp/bcp47.txt) language code.\n     */\n    [key: string]: {\n      /**\n       * The localized title.\n       */\n      title: string\n    }\n  }\n\n  /**\n   * The targeting settings of the channel section.\n   */\n  public targeting?: {\n    /**\n     * The languages for which the channel section is visible.\n     */\n    languages: string[]\n\n    /**\n     * The regions where the channel section is visible.\n     */\n    regions: string[]\n\n    /**\n     * The countries where the channel section is visible.\n     */\n    countries: string[]\n  }\n\n  /**\n   * The playlists in the channel section. Only available after calling [[ChannelSection#fetchPlaylists]].\n   */\n  public playlists?: Playlist[]\n\n  /**\n   * The channels in the channel section. Only available after calling [[ChannelSection#fetchChannels]].\n   */\n  public channels?: Channel[]\n\n  /**\n   * The ID of this channel section.\n   */\n  public id: string\n\n  constructor (youtube: YouTube, data: any) {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data)\n  }\n\n  /**\n   * @ignore\n   */\n  private _init (data: any) {\n    if (data.kind !== 'youtube#channelSection') {\n      throw new Error(`Invalid channel section type: ${data.kind}`)\n    }\n\n    const section = data\n\n    this.id = section.id\n\n    /* istanbul ignore next */\n    if (section.snippet) {\n      this.type = section.snippet.type\n      this.channelId = section.snippet.channelId\n      this.name = section.snippet.title\n      this.position = section.snippet.position\n      this.language = section.snippet.defaultLanguage\n      this.style = section.snippet.style\n      /* istanbul ignore next */\n      this.localizedName = section.snippet.localized ? section.snippet.localized.title : undefined\n    } else {\n      this.full = false\n    }\n\n    /* istanbul ignore next */\n    if (section.contentDetails) {\n      this.playlistIds = section.contentDetails.playlists\n      this.channelIds = section.contentDetails.channels\n    } else {\n      this.full = false\n    }\n\n    /* istanbul ignore next */\n    if (section.localizations) {\n      this.localizations = section.localizations\n    } else {\n      this.full = false\n    }\n\n    /* istanbul ignore next */\n    if (section.targeting) {\n      this.targeting = section.targeting\n    } else {\n      this.full = false\n    }\n  }\n\n  /**\n   * Fetches this channel section and reassigns this object to the new channel section object.\n   * Only useful if `this.full` is false, or if you want updated channel section info.\n   */\n  public async fetch () {\n    const section = await this.youtube.getChannelSection(this.id)\n    return Object.assign(this, section)\n  }\n\n  /**\n   * Fetches the channel section's playlists and assigns them to the [[ChannelSection#playlists]] property.\n   */\n  public async fetchPlaylists () {\n    if (!this.playlistIds) {\n      return\n    }\n\n    const playlists = []\n\n    for (let i = 0; i < this.playlistIds.length; i++) {\n      playlists.push(await this.youtube.getPlaylist(this.playlistIds[i]))\n    }\n\n    this.playlists = playlists\n    return this.playlists\n  }\n\n  /**\n   * Fetches the channel section's playlists and assigns them to the [[ChannelSection#playlists]] property.\n   */\n  public async fetchChannels () {\n    if (!this.channelIds) {\n      return\n    }\n\n    const channels = []\n\n    for (let i = 0; i < this.channelIds.length; i++) {\n      channels.push(await this.youtube.getChannel(this.channelIds[i]))\n    }\n\n    this.channels = channels\n    return this.channels\n  }\n}\n"],"sourceRoot":"../../src"}