"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YTComment = void 0;
class YTComment {
    constructor(youtube, data, type) {
        this.youtube = youtube;
        this.data = data;
        this._init(data, type);
    }
    /**
     * @ignore
     */
    _init(data, type) {
        if (data.kind !== 'youtube#comment') {
            throw new Error(`Invalid comment type: ${data.kind}`);
        }
        const comment = data;
        /* istanbul ignore next */
        if (comment.snippet) {
            this.author = {
                username: comment.snippet.authorDisplayName,
                avatar: comment.snippet.authorProfileImageUrl,
                channelId: comment.snippet.authorChannelId.value,
                channelUrl: comment.snippet.authorChannelUrl
            };
            this.text = {
                displayed: comment.snippet.textDisplay,
                original: comment.snippet.textOriginal
            };
            this.rateable = comment.snippet.canRate;
            this.popular = comment.snippet.likeCount >= 100;
            this.likes = comment.snippet.likeCount;
            this.datePublished = comment.snippet.publishedAt;
            this.dateEdited = comment.snippet.updatedAt;
            this.parentId = comment.snippet.parentId ? comment.snippet.parentId : comment.snippet.videoId ? comment.snippet.videoId : comment.snippet.channelId;
        }
        else {
            this.full = false;
        }
        this.id = comment.id;
        if (this.parentId) {
            this.url = 'https://youtube.com/' + (type === 'channel' ? `channel/${this.parentId}/discussion?lc=${this.id}` : `watch?v=${this.parentId}&lc=${this.id}`);
        }
        this.replies = [];
    }
    /**
     * Fetches replies to the comment.
     * @param maxResults The maximum amount of replies to fetch. Fetches all comments if <=0.
     */
    fetchReplies(maxResults = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            this.replies = yield this.youtube.getCommentReplies(this.id, maxResults);
            return this.replies;
        });
    }
    /**
     * Edits the comment.
     * Must be using an access token with correct scopes.
     * @param text The new text of the comment.
     */
    /* istanbul ignore next */
    edit(text) {
        if (this.data.snippet.parentId) {
            return this.youtube.oauth.editCommentReply(this.id, text);
        }
        return this.youtube.oauth.editComment(text, this.id);
    }
    /**
     * Replies to the comment.
     * Must be using an access token with correct scopes.
     * @param text The text of the reply.
     */
    /* istanbul ignore next */
    reply(text) {
        return this.youtube.oauth.replyToComment(this.id, text);
    }
    /**
     * Marks the comment as spam.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    markAsSpam() {
        return this.youtube.oauth.markCommentAsSpam(this.id);
    }
    /**
     * Sets the comment's moderation status.
     * Must be using an access token with correct scopes.
     * @param status The status to set the comment to.
     * @param banAuthor Whether or not to ban the author of the comment from commenting again.
     * Defaults to false.
     */
    /* istanbul ignore next */
    setModerationStatus(status, banAuthor = false) {
        return this.youtube.oauth.setCommentModerationStatus(this.id, status, banAuthor);
    }
    /**
     * Deletes the comment.
     * Must be using an access token with correct scopes.
     */
    /* istanbul ignore next */
    delete() {
        return this.youtube.oauth.deleteComment(this.id);
    }
}
exports.YTComment = YTComment;
/**
 * The name of the endpoint used for this entity.
 */
YTComment.endpoint = 'comments';
/**
 * The parts to request for this entity.
 */
YTComment.part = 'snippet';
/**
 * The fields to request for this entity.
 */
YTComment.fields = 'items(kind,id,' +
    'snippet(authorDisplayName,authorProfileImageUrl,authorChannelId,authorChannelUrl,textDisplay,textOriginal,parentId,videoId,channelId,canRate,likeCount,publishedAt,updatedAt))';

//# sourceMappingURL=comment.js.map
