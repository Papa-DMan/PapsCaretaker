"use strict";
/* istanbul ignore file */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuideCategory = void 0;
/**
 * A YouTube guide category.
 * @deprecated See https://developers.google.com/youtube/v3/docs/guideCategories
 */
class GuideCategory {
    constructor(youtube, data) {
        this.youtube = youtube;
        this.data = data;
        this._init(data);
    }
    /**
     * @ignore
     */
    _init(data) {
        if (data.kind !== 'youtube#guideCategory') {
            throw new Error(`Invalid guide category type: ${data.kind}`);
        }
        const category = data;
        this.id = category.id;
        this.full = true;
        /* istanbul ignore next */
        if (category.snippet) {
            this.channelId = category.snippet.channelId;
            this.title = category.snippet.title;
        }
        else {
            /* istanbul ignore next */
            this.full = false;
        }
    }
    /**
     * Fetches this category and reassigns this object to the new category object.
     * Only useful if `this.full` is false, or if you want updated category info.
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const category = yield this.youtube.getGuideCategory(this.id);
            return Object.assign(this, category);
        });
    }
    /**
     * Fetches the channel associated with this category.
     */
    getChannel() {
        return this.youtube.getChannel(this.channelId);
    }
}
exports.GuideCategory = GuideCategory;
/**
 * The name of the endpoint used for this entity.
 */
GuideCategory.endpoint = 'guideCategories';
/**
 * The parts to request for this entity.
 */
GuideCategory.part = 'snippet';
/**
 * The fields to request for this entity.
 */
GuideCategory.fields = 'items(kind,id,snippet(channelId,title))';

//# sourceMappingURL=guide-category.js.map
