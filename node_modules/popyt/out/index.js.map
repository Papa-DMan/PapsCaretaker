{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Video, Channel, Playlist, YTComment, Subscription, VideoCategory, GuideCategory, Language, Region, ChannelSection, Caption } from './entities'\nimport { Cache, Request } from './util'\nimport { OAuth } from './oauth'\nimport { SearchService, GenericService, SubscriptionService } from './services'\n\nexport * from './entities'\nexport * from './types'\n\n/**\n * The main class used to interact with the YouTube API. Use this.\n */\nexport class YouTube {\n  /**\n   * @ignore\n   */\n  public _shouldCache: boolean\n\n  /**\n   * @ignore\n   */\n  public _cacheSearches: boolean\n\n  /**\n   * @ignore\n   */\n  public _cacheTTL: number\n\n  /**\n   * @ignore\n   */\n  public _request = new Request('https://www.googleapis.com/youtube/v3')\n\n  /**\n   * @ignore\n   */\n  public _upload = new Request('https://www.googleapis.com/upload/youtube/v3')\n\n  public token: string\n\n  public accessToken: string\n\n  /**\n   * Methods requiring an OAuth token.\n   */\n  public oauth: OAuth\n\n  /**\n   * The language for the API to respond in. See [[YouTube#getLanguages]].\n   */\n  public language: string\n\n  /**\n   * The region for the API cater responses to. See [[YouTube#getRegions]].\n   */\n  public region: string\n\n  /**\n   *\n   * @param token Your YouTube Data API v3 token. Don't share this with anybody.\n   * It could be an API key or an OAuth 2.0 token.\n   * @param accessToken A Google OAuth 2.0 access token. Used for [[YouTube#oauth]] methods.\n   * @param options Caching options. Recommended to change.\n   * @param language The language for the API to respond in. See [[YouTube#getLanguages]].\n   * @param region The region for the API cater responses to. See [[YouTube#getRegions]].\n   */\n  constructor (token?: string, accessToken?: string, options: YouTubeOptions = { cache: true, cacheTTL: 600, cacheCheckInterval: 600, cacheSearches: true },\n    language: string = 'en_US', region: string = 'US') {\n    this.token = token\n    this.accessToken = accessToken\n\n    if (!this.accessToken && !this.token) {\n      throw new TypeError('Must include one of token or access token whenever constructing the YouTube object.')\n    }\n\n    this.oauth = new OAuth(this)\n\n    this._shouldCache = options.cache\n    this._cacheSearches = options.cacheSearches\n    this._cacheTTL = options.cacheTTL\n\n    this.language = language\n    this.region = region\n\n    if (options.cacheCheckInterval > 0) {\n      setInterval(Cache.checkTTLs, options.cacheCheckInterval * 1000)\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  public _cache (id: string, value: any) {\n    if (!this._shouldCache) {\n      return\n    }\n\n    Cache.set(id, value, this._cacheTTL > 0 ? this._cacheTTL * 1000 + new Date().getTime() : 0)\n  }\n\n  /**\n   * Search supported entities on YouTube.\n   * @param types An array of types to search for. May be a single type or multiple types.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   * @param fields The fields to include in the response. Includes all by default.\n   * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.\n   */\n  public search (types: (typeof Video | typeof Channel | typeof Playlist)[], searchTerm: string, maxResults: number = 10, pageToken?: string, fields?: string) {\n    return SearchService.search(this, types, searchTerm, maxResults, pageToken, null, fields)\n  }\n\n  /**\n   * Search videos on YouTube.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.\n   * @param channelId The channel ID that you want to specifically search for.\n   * @param category The category ID that you want to specifically search for.\n   * @param onlyEmbeddable Whether or not to return only embeddable videos.\n   * @param eventType The type of event you want to search for. Searches for everything by default.\n   */\n  public searchVideos (searchTerm: string, maxResults: number = 10, pageToken?: string, category?: string, channelId?: string, onlyEmbeddable: boolean = false,\n    eventType?: 'completed' | 'live' | 'upcoming', type: 'any' | 'episode' | 'movie' = 'any') {\n    return SearchService.search(this, [ Video ], searchTerm, maxResults, pageToken, channelId,\n      null, category, onlyEmbeddable, eventType, type) as Promise<{ results: Video[]; prevPageToken: string; nextPageToken: string }>\n  }\n\n  /**\n   * Search channels on YouTube.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.\n   */\n  public searchChannels (searchTerm: string, maxResults: number = 10, pageToken?: string) {\n    return this.search([ Channel ], searchTerm, maxResults, pageToken) as Promise<{ results: Channel[]; prevPageToken: string; nextPageToken: string }>\n  }\n\n  /**\n   * Search playlists on YouTube.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.\n   */\n  public searchPlaylists (searchTerm: string, maxResults: number = 10, pageToken?: string) {\n    return this.search([ Playlist ], searchTerm, maxResults, pageToken) as Promise<{ results: Playlist[]; prevPageToken: string; nextPageToken: string }>\n  }\n\n  /**\n   * Get a [[Video]] object from the URL, ID, or Title of a video.\n   * Meant mostly for getting by URL or ID.\n   * @param videoResolvable The URL, ID, or Title of the video.\n   */\n  public async getVideo (videoResolvable: string | Video) {\n    const id = await GenericService.getId(this, videoResolvable, Video)\n    return GenericService.getItem(this, Video, false, id) as Promise<Video>\n  }\n\n  /**\n   * Get a [[Channel]] object from the Username, URL or ID of a channel.\n   * Meant mostly for getting by URL or ID.\n   * @param channelResolvable The Username, URL or ID of the channel.\n   */\n  public async getChannel (channelResolvable: string | Channel) {\n    const id = await GenericService.getId(this, channelResolvable, Channel)\n    return GenericService.getItem(this, Channel, false, id) as Promise<Channel>\n  }\n\n  /**\n   * Get a [[Playlist]] object from the URL, ID, or Title of a playlist.\n   * Meant mostly for getting by URL or ID.\n   * @param playlistResolvable The URL, ID, or Title of the playlist.\n   */\n  public async getPlaylist (playlistResolvable: string | Playlist) {\n    const id = await GenericService.getId(this, playlistResolvable, Playlist)\n    return GenericService.getItem(this, Playlist, false, id) as Promise<Playlist>\n  }\n\n  /**\n   * Get a [[Comment]] object from the ID of a comment.\n   * @param commentId The ID of the comment.\n   */\n  public getComment (commentId: string) {\n    return GenericService.getItem(this, YTComment, false, commentId) as Promise<YTComment>\n  }\n\n  /**\n   * Get a [[Subscription]] object from the ID of a subscription.\n   * @param subscriptionId The ID of the subscription.\n   */\n  public getSubscription (subscriptionId: string) {\n    return GenericService.getItem(this, Subscription, false, subscriptionId) as Promise<Subscription>\n  }\n\n  /**\n   * Get a [[VideoCategory]] object from the ID of a category.\n   * @param categoryId The ID of the category.\n   */\n  public getCategory (categoryId: string) {\n    return GenericService.getItem(this, VideoCategory, false, categoryId) as Promise<VideoCategory>\n  }\n\n  /**\n   * Get a [[GuideCategory]] object from the ID of a category.\n   * @param categoryId The ID of the category.\n   * @deprecated See https://developers.google.com/youtube/v3/docs/guideCategories/list\n   */\n  /* istanbul ignore next */\n  public getGuideCategory (categoryId: string) {\n    return GenericService.getItem(this, GuideCategory, false, categoryId) as Promise<GuideCategory>\n  }\n\n  /**\n   * Get a [[ChannelSection]] object from the ID of a section.\n   * @param categoryId The ID of the section.\n   */\n  public getChannelSection (sectionId: string) {\n    return GenericService.getItem(this, ChannelSection, false, sectionId) as Promise<ChannelSection>\n  }\n\n  /**\n   * Get a [[Subscription]] object from the subscriber and channel of a subscription.\n   * @param subscriberResolvable A resolvable channel that is the subscriber.\n   * @param channelResolvable A resolvable channel that is the channel being subscribed to.\n   */\n  public async getSubscriptionByChannels (subscriberResolvable: string | Channel, channelResolvable: string | Channel) {\n    const subscriberId = await GenericService.getId(this, subscriberResolvable, Channel)\n    const channelId = await GenericService.getId(this, channelResolvable, Channel)\n\n    return SubscriptionService.getSubscriptionByChannels(this, subscriberId, channelId)\n  }\n\n  /**\n   * Get `maxResults` videos in a [[Playlist]]. Used mostly internally with `Playlist#fetchVideos`.\n   * @param playlistResolvable The URL, ID, or Title of the playlist.\n   * @param maxResults The maximum amount of videos to get from the playlist. If <=0, returns all videos in the playlist.\n   * @returns Partial video objects.\n   */\n  public async getPlaylistItems (playlistResolvable: string | Playlist, maxResults: number = 10) {\n    const playlistId = await GenericService.getId(this, playlistResolvable, Playlist)\n    return GenericService.getPaginatedItems(this, 'playlistItems', false, playlistId, maxResults) as Promise<Video[]>\n  }\n\n  /**\n   * Get `maxResults` [[YTComment]]s from a [[Video]]. Used mostly internally with `Video#fetchComments`.\n   * @param videoResolvable The URL, ID, or Title of the video.\n   * @param maxResults The maximum amount of comments to get from the video. If <=0, returns all comments on the video.\n   * @returns Partial comment objects.\n   */\n  public async getVideoComments (videoResolvable: string | Video, maxResults: number = 10) {\n    const videoId = await GenericService.getId(this, videoResolvable, Video)\n    return GenericService.getPaginatedItems(this, 'commentThreads:video', false, videoId, maxResults) as Promise<YTComment[]>\n  }\n\n  /**\n   * Get `maxResults` [[YTComment]]s from a [[Channel]]'s discussion tab. Used mostly internally with `Channel#fetchComments`.\n   * @param channelResolvable The Username, URL, or ID of the channel.\n   * @param maxResults The maximum amount of comments to get from the channel. If <=0, returns all comments on the channel.\n   * @returns Partial comment objects.\n   */\n  public async getChannelComments (channelResolvable: string | Channel, maxResults: number = 10) {\n    const channelId = await GenericService.getId(this, channelResolvable, Channel)\n    return GenericService.getPaginatedItems(this, 'commentThreads:channel', false, channelId, maxResults) as Promise<YTComment[]>\n  }\n\n  /**\n   * Get `maxResults` of a [[Channel]]'s [[Playlist]]s. Used mostly internally with `Channel#fetchPlaylists`.\n   * @param channelResolvable The Username, URL, or ID of the channel.\n   * @param maxResults The maximum amount of playlists to get from the channel. If <=0, returns all playlists.\n   * @returns Partial playlist objects.\n   */\n  public async getChannelPlaylists (channelResolvable: string | Channel, maxResults: number = 10) {\n    const channelId = await GenericService.getId(this, channelResolvable, Channel)\n    return GenericService.getPaginatedItems(this, 'playlists:channel', false, channelId, maxResults) as Promise<Playlist[]>\n  }\n\n  /**\n   * Get `maxResults` of a [[Channel]]'s [[Subscription]]s. Used mostly internally with `Channel#fetchSubscriptions`.\n   * @param channelResolvable The Username, URL, or ID of the channel.\n   * @param maxResults The maximum amount of subscriptions to get from the channel. If <=0, returns all subscriptions.\n   * @returns Partial subscription objects.\n   */\n  public async getChannelSubscriptions (channelResolvable: string | Channel, maxResults: number = 10) {\n    const channelId = await GenericService.getId(this, channelResolvable, Channel)\n    return GenericService.getPaginatedItems(this, 'subscriptions', false, channelId, maxResults) as Promise<Subscription[]>\n  }\n\n  /**\n   * Get `maxResults` replies to a [[YTComment]]. Used mostly internally with `Comment#fetchReplies`.\n   * @param commentId The ID of the comment to get replies from.\n   * @param maxResults The maximum amount of replies to get. Gets all replies if <=0.\n   * @returns Partial comment objects.\n   */\n  public getCommentReplies (commentId: string, maxResults: number = 10) {\n    return GenericService.getPaginatedItems(this, 'comments', false, commentId, maxResults) as Promise<YTComment[]>\n  }\n\n  /**\n   * Gets the [[ChannelSection]]s of a [[Channel]]. Used mostly internally with [[Channel#fetchSections]].\n   * @param channelResolvable The Username, URL, or ID of the channel to get the sections from.\n   * @returns Partial channel section objects.\n   */\n  public async getChannelSections (channelResolvable: string | Channel) {\n    const channelId = await GenericService.getId(this, channelResolvable, Channel)\n    return GenericService.getPaginatedItems(this, 'channelSections', false, channelId) as Promise<ChannelSection[]>\n  }\n\n  /**\n   * Get the list of categories in `this.region`.\n   * @param all Whether or not to get all categories (otherwise just gets a page).\n   */\n  public getCategories (all: boolean = false) {\n    return GenericService.getPaginatedItems(this, 'videoCategories', false, null, all ? -1 : 100) as Promise<VideoCategory[]>\n  }\n\n  /**\n   * Get the list of guide categories in `this.region`.\n   * @deprecated See https://developers.google.com/youtube/v3/docs/guideCategories/list\n   */\n  /* istanbul ignore next */\n  public getGuideCategories () {\n    return GenericService.getPaginatedItems(this, 'guideCategories', false) as Promise<GuideCategory[]>\n  }\n\n  /**\n   * Get a list of languages that YouTube supports.\n   */\n  public getLanguages () {\n    return GenericService.getPaginatedItems(this, 'i18nLanguages', false, null) as Promise<Language[]>\n  }\n\n  /**\n   * Get a list of regions that YouTube supports.\n   */\n  public getRegions () {\n    return GenericService.getPaginatedItems(this, 'i18nRegions', false, null) as Promise<Region[]>\n  }\n}\n\ntype YouTubeOptions = {\n  /**\n   * Whether or not to cache entities.\n   */\n  cache?: boolean\n\n  /**\n   * How long to cache entities in seconds (0 = unlimited).\n   */\n  cacheTTL?: number\n\n  /**\n   * How often to check for and delete expired cached items in seconds.\n   */\n  cacheCheckInterval?: number\n\n  /**\n   * Whether or not we should cache searches\n   */\n  cacheSearches?: boolean\n}\n\nexport default YouTube\n"],"sourceRoot":"../src"}