/// <reference types="node" />
import { YouTube, VideoUpdateResource, Caption } from '..';
import { Thumbnail, ISODuration } from '../types';
import { YTComment } from './comment';
/**
 * A YouTube video.
 */
export declare class Video {
    /**
     * The name of the endpoint used for this entity.
     */
    static endpoint: string;
    /**
     * The parts to request for this entity.
     */
    static part: string;
    /**
     * The fields to request for this entity.
     */
    static fields: string;
    /**
     * YouTube object that created the video.
     */
    youtube: YouTube;
    /**
     * The raw data of the video.
     */
    data: any;
    /**
     * Whether or not this is a full video object.
     */
    full: boolean;
    /**
     * The ID of the video.
     */
    id: string;
    /**
     * The title of the video.
     */
    title: string;
    /**
     * The description of the video.
     */
    description: string;
    /**
     * The thumbnails of the video.
     */
    thumbnails: {
        default?: Thumbnail;
        medium?: Thumbnail;
        high?: Thumbnail;
        standard?: Thumbnail;
        maxres?: Thumbnail;
    };
    /**
     * The tags of the video.
     */
    tags: string[];
    /**
     * The date the video was published.
     */
    datePublished: Date;
    /**
     * The ID of the channel that uploaded the video.
     */
    channelId: string;
    /**
     * @ignore
     */
    _length: ISODuration;
    /**
     * The minutes of the video.
     */
    minutes: number;
    /**
     * The seconds of the video.
     */
    seconds: number;
    /**
     * The url of the video.
     */
    url: string;
    /**
     * The short url of the video, i.e. https://youtu.be/id
     */
    shortUrl: string;
    /**
     * The number of likes the video has.
     */
    likes: number;
    /**
     * The number of dislikes the video has.
     */
    dislikes: number;
    /**
     * The number of views the video has.
     */
    views: number;
    /**
     * Whether or not this video COULD BE private. True if the video might
     * be private, as you cannot check if playlist items are private.
     *
     * I would recommend that you try and fetch the video and catch an error
     * if it is from a playlist & marked as private.
     */
    private: boolean;
    /**
     * The video's comments. Only defined when Video#fetchComments is called.
     */
    comments: YTComment[];
    /**
     * The number of comments on the video.
     */
    commentCount: number;
    /**
     * If this is a ongoing livestream, this is `live`.
     * If this is an upcoming livestream, this is `upcoming`.
     * If this is not a livestream, this is `false`.
     */
    liveStatus: 'live' | 'upcoming' | false;
    /**
     * The video category associated with the video.
     */
    category: string;
    /**
     * Properties to do with videos made for children.
     */
    kids: {
        /**
         * Whether or not the video was made for children.
         */
        madeForKids: boolean;
        /**
         * Whether or not the poster of the video marked it as made for kids.
         */
        selfDeclaredMadeForKids: boolean;
    };
    /**
     * The caption data associated with this video. Only available after running [[Video#fetchCaptions]].
     */
    captions: Caption[];
    constructor(youtube: YouTube, data: any);
    /**
     * @ignore
     */
    private _init;
    /**
     * Posts a comment to the video.
     * Must be using an access token with correct scopes.
     * @param text The text of the comment.
     */
    postComment(text: string): Promise<YTComment>;
    /**
     * Fetches this video and reassigns this object to the new video object.
     * Only useful if `this.full` is false, or if you want updated video info.
     */
    fetch(): Promise<this & Video>;
    /**
     * Fetches the video's comments and assigns them to Video#comments.
     * @param maxResults The maximum amount of comments to fetch
     */
    fetchComments(maxResults?: number): Promise<YTComment[]>;
    /**
     * Gets the user's rating on the video.
     */
    getRating(): Promise<'like' | 'dislike' | 'none' | 'unspecified'>;
    /**
     * Likes the video.
     * Must be using an access token with correct scopes.
     */
    like(): Promise<void>;
    /**
     * Dislikes the video.
     * Must be using an access token with correct scopes.
     */
    dislike(): Promise<void>;
    /**
     * Removes the user's like/dislike on the video.
     * Must be using an access token with correct scopes.
     */
    unrate(): Promise<void>;
    /**
     * Reports the video for abuse.
     * Must be using an access token with correct scopes.
     * @param reasonId The reason for reporting. (IDs can be found [here](https://developers.google.com/youtube/v3/docs/videoAbuseReportReasons/list))
     * @param secondaryReasonId An optional second reason for reporting.
     * @param comments Any additional information.
     * @param language The language that the reporter speaks.
     */
    reportAbuse(reasonId: string, secondaryReasonId?: string, comments?: string, language?: string): Promise<void>;
    /**
     * Deletes the video.
     * Must be using an access token with correct scopes.
     */
    delete(): Promise<void>;
    /**
     * Edits the video.
     * Must be using an access token with correct scopes.
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * @param video The updated video object.
     */
    update(video: VideoUpdateResource): Promise<Video>;
    /**
     * Sets a new thumbnail for a video.
     * Must be using an access token with correct scopes.
     * @param image The image data and type to upload.
     */
    setThumbnail(image: {
        type: 'jpeg' | 'png';
        data: Buffer;
    }): Promise<typeof Video.prototype.thumbnails>;
    /**
     * Fetches the captions for the video.
     * Must be using an access token with correct scopes.
     */
    fetchCaptions(): Promise<Caption[]>;
    /**
     * Uploads a caption track for a video.
     * Must be using an access token with correct scopes.
     * @param language The language of the track.
     * @param name The name of the track.
     * @param track The caption track to upload.
     * @param draft Whether or not the track is a draft.
     */
    uploadCaption(language: string, name: string, track: Buffer, draft?: boolean): Promise<Caption>;
    /**
     * Updates a caption track of a video.
     * Must be using an access token with correct scopes.
     * @param track The modified caption track to upload.
     * @param draft Whether or not the track is a draft.
     */
    updateCaption(track: Buffer, draft?: boolean): Promise<Caption>;
}
