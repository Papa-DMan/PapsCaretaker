import { YouTube, Video, Thumbnail } from '..';
/**
 * A YouTube playlist.
 */
export declare class Playlist {
    /**
     * The name of the endpoint used for this entity.
     */
    static endpoint: string;
    /**
     * The parts to request for this entity.
     */
    static part: string;
    /**
     * The fields to request for this entity.
     */
    static fields: string;
    /**
     * The YouTube object that created this playlist.
     */
    youtube: YouTube;
    /**
     * The raw data of this playlist.
     */
    data: any;
    /**
     * Whether or not this is a full playlist object.
     */
    full: boolean;
    /**
     * The ID of this playlist.
     */
    id: string;
    /**
     * The title of the playlist.
     */
    title: string;
    /**
     * The description of the playlist.
     */
    description: string;
    /**
     * The videos in the playlist. Only available after calling `Playlist#fetchVideos()`.
     */
    videos: Video[];
    /**
     * The ID of the creator of the playlist.
     */
    creatorId: string;
    /**
     * The url of the playlist.
     */
    url: string;
    /**
     * The date the playlist was created.
     */
    dateCreated: Date;
    /**
     * The thumbnails for the playlist.
     */
    thumbnails: {
        default?: Thumbnail;
        high?: Thumbnail;
        maxres?: Thumbnail;
        medium?: Thumbnail;
        standard?: Thumbnail;
    };
    /**
     * The number of items in the playlist.
     */
    length: number;
    /**
     * An \<iframe\> tag that embeds a player that will play the playlist.
     */
    embedHtml: string;
    /**
     * The tags of the playlist.
     */
    tags: string[];
    constructor(youtube: YouTube, data: any);
    /**
     * @ignore
     */
    private _init;
    /**
     * Adds videos in this playlist to the `videos` property of this playlist.
     * @param maxResults Fetches all videos if <=0.
     */
    fetchVideos(maxResults?: number): Promise<Video[]>;
    /**
     * Fetches this playlist and reassigns this object to the new playlist object.
     * Only useful if `this.full` is false, or if you want updated playlist info.
     */
    fetch(): Promise<this & Playlist>;
    /**
     * Edits the playlist.
     * Must be using an access token with correct scopes.
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * @param title A title for the playlist.
     * @param description A description of the playlist.
     * @param privacy Whether the video is private, public, or unlisted.
     * @param tags Tags pertaining to the playlist.
     * @param language The language of the playlist's default title and description.
     * @param localizations Translated titles and descriptions.
     */
    update(title: string, description?: string, privacy?: 'private' | 'public' | 'unlisted', tags?: string[], language?: string, localizations?: {
        [language: string]: {
            title: string;
            description: string;
        };
    }): Promise<Playlist>;
    /**
     * Adds a [[Video]] to the playlist.
     * Must be using an access token with correct scopes.
     * @param videoResolvable The URL, ID, or Title of the video.
     * @param position The zero-based position to insert the video in.
     * @param note A note on the video.
     */
    addVideo(videoResolvable: string | Video, position?: number, note?: string): Promise<Video>;
    /**
     * Updates a [[Video]] in the playlist.
     * Must be using an access token with correct scopes.
     * @param videoResolvable The URL, ID, or Title of the video.
     * @param position The zero-based position to move the video to.
     * @param note A new note on the video.
     * @param itemId The playlist item ID if you have it.
     */
    updateVideo(videoResolvable: string | Video, position?: number, note?: string, itemId?: string): Promise<Video>;
    /**
     * Removes a [[Video]] from the playlist.
     * Must be using an access token with correct scopes.
     * @param videoResolvable The URL, ID, or Title of the video. Must specify this or `itemId`.
     * @param itemId The playlist item ID if you have it. Must specify this or `videoResolvable`.
     */
    removeVideo(videoResolvable?: string, itemId?: string): Promise<never>;
    /**
     * Deletes the playlist.
     * Must be using an access token with correct scopes.
     */
    delete(): Promise<void>;
}
