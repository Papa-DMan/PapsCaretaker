import { Video, Channel, Playlist, YTComment, Subscription, VideoCategory, GuideCategory, Language, Region, ChannelSection } from './entities';
import { Request } from './util';
import { OAuth } from './oauth';
export * from './entities';
export * from './types';
/**
 * The main class used to interact with the YouTube API. Use this.
 */
export declare class YouTube {
    /**
     * @ignore
     */
    _shouldCache: boolean;
    /**
     * @ignore
     */
    _cacheSearches: boolean;
    /**
     * @ignore
     */
    _cacheTTL: number;
    /**
     * @ignore
     */
    _request: Request;
    /**
     * @ignore
     */
    _upload: Request;
    token: string;
    accessToken: string;
    /**
     * Methods requiring an OAuth token.
     */
    oauth: OAuth;
    /**
     * The language for the API to respond in. See [[YouTube#getLanguages]].
     */
    language: string;
    /**
     * The region for the API cater responses to. See [[YouTube#getRegions]].
     */
    region: string;
    /**
     *
     * @param token Your YouTube Data API v3 token. Don't share this with anybody.
     * It could be an API key or an OAuth 2.0 token.
     * @param accessToken A Google OAuth 2.0 access token. Used for [[YouTube#oauth]] methods.
     * @param options Caching options. Recommended to change.
     * @param language The language for the API to respond in. See [[YouTube#getLanguages]].
     * @param region The region for the API cater responses to. See [[YouTube#getRegions]].
     */
    constructor(token?: string, accessToken?: string, options?: YouTubeOptions, language?: string, region?: string);
    /**
     * @ignore
     */
    _cache(id: string, value: any): void;
    /**
     * Search supported entities on YouTube.
     * @param types An array of types to search for. May be a single type or multiple types.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param fields The fields to include in the response. Includes all by default.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    search(types: (typeof Video | typeof Channel | typeof Playlist)[], searchTerm: string, maxResults?: number, pageToken?: string, fields?: string): Promise<{
        results: (Video | Channel | Playlist)[];
        prevPageToken: string;
        nextPageToken: string;
    }>;
    /**
     * Search videos on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     * @param channelId The channel ID that you want to specifically search for.
     * @param category The category ID that you want to specifically search for.
     * @param onlyEmbeddable Whether or not to return only embeddable videos.
     * @param eventType The type of event you want to search for. Searches for everything by default.
     */
    searchVideos(searchTerm: string, maxResults?: number, pageToken?: string, category?: string, channelId?: string, onlyEmbeddable?: boolean, eventType?: 'completed' | 'live' | 'upcoming', type?: 'any' | 'episode' | 'movie'): Promise<{
        results: Video[];
        prevPageToken: string;
        nextPageToken: string;
    }>;
    /**
     * Search channels on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    searchChannels(searchTerm: string, maxResults?: number, pageToken?: string): Promise<{
        results: Channel[];
        prevPageToken: string;
        nextPageToken: string;
    }>;
    /**
     * Search playlists on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    searchPlaylists(searchTerm: string, maxResults?: number, pageToken?: string): Promise<{
        results: Playlist[];
        prevPageToken: string;
        nextPageToken: string;
    }>;
    /**
     * Get a [[Video]] object from the URL, ID, or Title of a video.
     * Meant mostly for getting by URL or ID.
     * @param videoResolvable The URL, ID, or Title of the video.
     */
    getVideo(videoResolvable: string | Video): Promise<Video>;
    /**
     * Get a [[Channel]] object from the Username, URL or ID of a channel.
     * Meant mostly for getting by URL or ID.
     * @param channelResolvable The Username, URL or ID of the channel.
     */
    getChannel(channelResolvable: string | Channel): Promise<Channel>;
    /**
     * Get a [[Playlist]] object from the URL, ID, or Title of a playlist.
     * Meant mostly for getting by URL or ID.
     * @param playlistResolvable The URL, ID, or Title of the playlist.
     */
    getPlaylist(playlistResolvable: string | Playlist): Promise<Playlist>;
    /**
     * Get a [[Comment]] object from the ID of a comment.
     * @param commentId The ID of the comment.
     */
    getComment(commentId: string): Promise<YTComment>;
    /**
     * Get a [[Subscription]] object from the ID of a subscription.
     * @param subscriptionId The ID of the subscription.
     */
    getSubscription(subscriptionId: string): Promise<Subscription>;
    /**
     * Get a [[VideoCategory]] object from the ID of a category.
     * @param categoryId The ID of the category.
     */
    getCategory(categoryId: string): Promise<VideoCategory>;
    /**
     * Get a [[GuideCategory]] object from the ID of a category.
     * @param categoryId The ID of the category.
     * @deprecated See https://developers.google.com/youtube/v3/docs/guideCategories/list
     */
    getGuideCategory(categoryId: string): Promise<GuideCategory>;
    /**
     * Get a [[ChannelSection]] object from the ID of a section.
     * @param categoryId The ID of the section.
     */
    getChannelSection(sectionId: string): Promise<ChannelSection>;
    /**
     * Get a [[Subscription]] object from the subscriber and channel of a subscription.
     * @param subscriberResolvable A resolvable channel that is the subscriber.
     * @param channelResolvable A resolvable channel that is the channel being subscribed to.
     */
    getSubscriptionByChannels(subscriberResolvable: string | Channel, channelResolvable: string | Channel): Promise<Subscription>;
    /**
     * Get `maxResults` videos in a [[Playlist]]. Used mostly internally with `Playlist#fetchVideos`.
     * @param playlistResolvable The URL, ID, or Title of the playlist.
     * @param maxResults The maximum amount of videos to get from the playlist. If <=0, returns all videos in the playlist.
     * @returns Partial video objects.
     */
    getPlaylistItems(playlistResolvable: string | Playlist, maxResults?: number): Promise<Video[]>;
    /**
     * Get `maxResults` [[YTComment]]s from a [[Video]]. Used mostly internally with `Video#fetchComments`.
     * @param videoResolvable The URL, ID, or Title of the video.
     * @param maxResults The maximum amount of comments to get from the video. If <=0, returns all comments on the video.
     * @returns Partial comment objects.
     */
    getVideoComments(videoResolvable: string | Video, maxResults?: number): Promise<YTComment[]>;
    /**
     * Get `maxResults` [[YTComment]]s from a [[Channel]]'s discussion tab. Used mostly internally with `Channel#fetchComments`.
     * @param channelResolvable The Username, URL, or ID of the channel.
     * @param maxResults The maximum amount of comments to get from the channel. If <=0, returns all comments on the channel.
     * @returns Partial comment objects.
     */
    getChannelComments(channelResolvable: string | Channel, maxResults?: number): Promise<YTComment[]>;
    /**
     * Get `maxResults` of a [[Channel]]'s [[Playlist]]s. Used mostly internally with `Channel#fetchPlaylists`.
     * @param channelResolvable The Username, URL, or ID of the channel.
     * @param maxResults The maximum amount of playlists to get from the channel. If <=0, returns all playlists.
     * @returns Partial playlist objects.
     */
    getChannelPlaylists(channelResolvable: string | Channel, maxResults?: number): Promise<Playlist[]>;
    /**
     * Get `maxResults` of a [[Channel]]'s [[Subscription]]s. Used mostly internally with `Channel#fetchSubscriptions`.
     * @param channelResolvable The Username, URL, or ID of the channel.
     * @param maxResults The maximum amount of subscriptions to get from the channel. If <=0, returns all subscriptions.
     * @returns Partial subscription objects.
     */
    getChannelSubscriptions(channelResolvable: string | Channel, maxResults?: number): Promise<Subscription[]>;
    /**
     * Get `maxResults` replies to a [[YTComment]]. Used mostly internally with `Comment#fetchReplies`.
     * @param commentId The ID of the comment to get replies from.
     * @param maxResults The maximum amount of replies to get. Gets all replies if <=0.
     * @returns Partial comment objects.
     */
    getCommentReplies(commentId: string, maxResults?: number): Promise<YTComment[]>;
    /**
     * Gets the [[ChannelSection]]s of a [[Channel]]. Used mostly internally with [[Channel#fetchSections]].
     * @param channelResolvable The Username, URL, or ID of the channel to get the sections from.
     * @returns Partial channel section objects.
     */
    getChannelSections(channelResolvable: string | Channel): Promise<ChannelSection[]>;
    /**
     * Get the list of categories in `this.region`.
     * @param all Whether or not to get all categories (otherwise just gets a page).
     */
    getCategories(all?: boolean): Promise<VideoCategory[]>;
    /**
     * Get the list of guide categories in `this.region`.
     * @deprecated See https://developers.google.com/youtube/v3/docs/guideCategories/list
     */
    getGuideCategories(): Promise<GuideCategory[]>;
    /**
     * Get a list of languages that YouTube supports.
     */
    getLanguages(): Promise<Language[]>;
    /**
     * Get a list of regions that YouTube supports.
     */
    getRegions(): Promise<Region[]>;
}
declare type YouTubeOptions = {
    /**
     * Whether or not to cache entities.
     */
    cache?: boolean;
    /**
     * How long to cache entities in seconds (0 = unlimited).
     */
    cacheTTL?: number;
    /**
     * How often to check for and delete expired cached items in seconds.
     */
    cacheCheckInterval?: number;
    /**
     * Whether or not we should cache searches
     */
    cacheSearches?: boolean;
};
export default YouTube;
