/// <reference types="node" />
import YouTube, { YTComment, Channel, Playlist, Subscription, Video, VideoAbuseReportReason, ChannelSection, VideoUpdateResource, ChannelBrandingSettings, ChannelSectionType, Caption } from '.';
/**
 * All methods requiring an OAuth access token.
 * Use `YouTube#oauth` to access these methods.
 */
export declare class OAuth {
    youtube: YouTube;
    /**
     *
     * @param youtube The YouTube object to retrieve the token from.
     */
    constructor(youtube: YouTube);
    /**
     * @ignore
     */
    private checkTokenAndThrow;
    /**
     * Gets the authorized user's [[Channel]].
     * Last tested 05/18/2020 11:48. PASSING
     */
    getMe(): Promise<Channel>;
    /**
     * Gets the authorized user's [[Subscription]]s.
     * Last tested 05/18/2020 11:48. PASSING
     * @param maxResults The maximum number of subscriptions to fetch.
     * Fetches 10 by default. Set to a value <=0 to fetch all.
     */
    getMySubscriptions(maxResults?: number): Promise<Subscription[]>;
    /**
     * Gets the authorized user's [[Playlist]]s.
     * Last tested 05/18/2020 11:48. PASSING
     * @param maxResults The maximum number of playlists to fetch.
     * Fetches 10 by default. Set to a value <=0 to fetch all.
     */
    getMyPlaylists(maxResults?: number): Promise<Playlist[]>;
    /**
     * Post a [[Comment]] on a [[Video]] or [[Channel]] discussion.
     * Last tested 05/18/2020 11:48. PASSING
     * @param text The text content of the comment.
     * @param channelResolvable The channel to post the comment on.
     * @param videoResolvable The video of the channel to post the comment on.
     * If falsey, the comment will be posted to the channel discussion.
     */
    postComment(text: string, channelResolvable: string | Channel, videoResolvable?: string): Promise<YTComment>;
    /**
     * Replies to a [[YTComment]].
     * Last tested 05/18/2020 11:48. PASSING
     * @param commentId The ID of the comment to reply to.
     * @param text The text to reply with.
     * @param commentType What this comment is on - defaults to video.
     * Required for [[YTComment#url]] to be correct.
     */
    replyToComment(commentId: string, text: string): Promise<YTComment>;
    /**
     * Edit a [[Comment]] on a [[Video]] or [[Channel]] discussion.
     * Last tested 05/18/2020 11:48. PASSING
     * @param text The new text content of the comment.
     * @param commentId The ID of the comment.
     */
    editComment(text: string, commentId: string): Promise<YTComment>;
    /**
     * Edits a [[YTComment]] reply.
     * Last tested 05/18/2020 11:48. PASSING
     * @param commentId The ID of the reply to edit.
     * @param text The text to edit the reply to.
     * @param commentType What this comment is on - defaults to video.
     * Required for [[YTComment#url]] to be correct.
     */
    editCommentReply(commentId: string, text: string): Promise<YTComment>;
    /**
     * Marks a [[YTComment]] as spam.
     * Last tested NEVER
     * @param commentId The ID of the comment to mark as spam.
     */
    markCommentAsSpam(commentId: string): Promise<void>;
    /**
     * Sets the moderation status of a [[YTComment]]
     * Last tested NEVER
     * @param commentId The ID of the comment to set the moderation status of.
     * @param moderationStatus The moderation status to set the comment to.
     * @param banAuthor Whether or not to ban the author from making future comments.
     */
    setCommentModerationStatus(commentId: string, moderationStatus: 'heldForReview' | 'published' | 'rejected', banAuthor?: boolean): Promise<void>;
    /**
     * Deletes a [[YTComment]].
     * Last tested 05/18/2020 11:48. PASSING
     * @param id The ID of the comment to delete.
     */
    deleteComment(id: string): Promise<void>;
    /**
     * Subscribe to a [[Channel]].
     * Last tested 05/18/2020 11:48. PASSING
     * @param channelResolvable The channel to subscribe to.
     * @returns A partial subscription object.
     */
    subscribeToChannel(channelResolvable: string | Channel): Promise<Subscription>;
    /**
     * Unsubscribe from a [[Channel]].
     * Last tested 05/18/2020 11:48. PASSING
     * @param channelId The channel to unsubscribe from.
     */
    unsubscribeFromChannel(subscriptionId: string): Promise<void>;
    /**
     * Like, dislike, or remove a rating from a [[Video]].
     * Last tested 05/18/2020 11:48. PASSING
     * @param videoResolvable The video to rate.
     * @param rating The rating to give the video.
     */
    rateVideo(videoResolvable: string | Video, rating: 'like' | 'dislike' | 'none'): Promise<void>;
    /**
     * Retrieve your rating on a [[Video]].
     * Last tested 05/18/2020 11:48. PASSING
     * @param videoResolvables The video(s) to retrieve your rating from.
     */
    getMyRatings(videoResolvables: (string | Video)[]): Promise<{
        videoId: string;
        rating: 'like' | 'dislike' | 'none' | 'unspecified';
    }[]>;
    /**
     * Report a [[Video]] for abuse.
     * Last tested NEVER
     * @param videoResolvable The video to report.
     * @param reasonId The reason for reporting. (IDs can be found [here](https://developers.google.com/youtube/v3/docs/videoAbuseReportReasons/list))
     * @param secondaryReasonId An optional second reason for reporting.
     * @param comments Any additional information.
     * @param language The language that the reporter speaks.
     */
    reportAbuse(videoResolvable: string | Video, reasonId: string, secondaryReasonId?: string, comments?: string, language?: string): Promise<void>;
    /**
     * Deletes a [[Video]].
     * Last tested NEVER
     * @param videoResolvable The video to delete.
     */
    deleteVideo(videoResolvable: string | Video): Promise<void>;
    /**
     * Updates a [[Video]].
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * Last tested NEVER
     * @param video The updated video object.
     */
    updateVideo(video: VideoUpdateResource): Promise<Video>;
    /**
     * Sets a new [[Thumbnail]] for a [[Video]].
     * Last tested 05/18/2020 11:48. PASSING
     * @param videoResolvable The video to set the thumbnail for.
     * @param image The image data and type to upload.
     */
    setThumbnail(videoResolvable: string | Video, image: {
        type: 'jpeg' | 'png';
        data: Buffer;
    }): Promise<typeof Video.prototype.thumbnails>;
    /**
     * Creates a [[Playlist]].
     * Last tested 05/18/2020 11:48. PASSING
     * @param title A title for the playlist.
     * @param description A description of the playlist.
     * @param privacy Whether the video is private, public, or unlisted.
     * @param tags Tags pertaining to the playlist.
     * @param language The language of the playlist's default title and description.
     * @param localizations Translated titles and descriptions.
     */
    createPlaylist(title: string, description?: string, privacy?: 'private' | 'public' | 'unlisted', tags?: string[], language?: string, localizations?: {
        [language: string]: {
            title: string;
            description: string;
        };
    }): Promise<Playlist>;
    /**
     * Updates a [[Playlist]].
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * Last tested 05/18/2020 11:48. PASSING
     * @param playlistResolvable The playlist to update.
     * @param title A title for the playlist.
     * @param description A description of the playlist.
     * @param privacy Whether the video is private, public, or unlisted.
     * @param tags Tags pertaining to the playlist.
     * @param language The language of the playlist's default title and description.
     * @param localizations Translated titles and descriptions.
     */
    updatePlaylist(playlistResolvable: string | Playlist, title: string, description?: string, privacy?: 'private' | 'public' | 'unlisted', tags?: string[], language?: string, localizations?: {
        [language: string]: {
            title: string;
            description: string;
        };
    }): Promise<Playlist>;
    /**
     * Deletes a [[Playlist]].
     * Last tested 05/18/2020 11:48. PASSING
     * @param playlistResolvable The playlist to delete.
     */
    deletePlaylist(playlistResolvable: string | Playlist): Promise<void>;
    /**
     * Adds a [[Video]] to a [[Playlist]].
     * Last tested 05/18/2020 11:48. PASSING
     * @param playlistResolvable The playlist to add the video to.
     * @param videoResolvable The video to add to the playlist.
     * @param position The position to add the video in. Defaults to the end.
     * @param note A user-generated note on the video.
     * @returns A partial video object.
     */
    addPlaylistItem(playlistResolvable: string | Playlist, videoResolvable: string | Video, position?: number, note?: string): Promise<Video>;
    /**
     * Edits a playlist item.
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * Last tested 05/18/2020 11:48. PASSING
     * @param id The ID of the playlist item to edit.
     * @param playlistResolvable The playlist that the video is in.
     * @param videoResolvable The video that's in the playlist.
     * @param position The position to change the playlist item's to.
     * @param note The note to change the playlist item's to.
     * @returns A partial video object.
     */
    updatePlaylistItem(id: string, playlistResolvable: string | Playlist, videoResolvable: string | Video, position?: number, note?: string): Promise<Video>;
    /**
     * Deletes a playlist item.
     * Last tested 05/18/2020 11:48. PASSING
     * @param id The ID of the playlist item to delete.
     */
    deletePlaylistItem(id: string): Promise<void>;
    /**
     * Updates a channel's branding settings.
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * Last tested NEVER
     * @param channelResolvable The channel to update the branding settings of.
     * @param brandingSettings The new branding settings.
     */
    updateChannelBranding(channelResolvable: string | Channel, brandingSettings: ChannelBrandingSettings): Promise<Channel>;
    /**
     * Updates a channel's localizations.
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * Last tested 05/20/2020 02:58. PASSING
     * @param channelResolvable The channel to update the localizations of.
     * @param localizations The new localizations.
     */
    updateChannelLocalizations(channelResolvable: string | Channel, localizations: {
        [key: string]: {
            title: string;
            description: string;
        };
    }): Promise<Channel>;
    /**
     * Sets a channel as made for kids or not made for kids.
     * Last tested 05/20/2020 02:58. PASSING
     * @param channelResolvable The channel to update.
     * @param madeForKids Whether or not the channel is made for kids.
     */
    setChannelMadeForKids(channelResolvable: string | Channel, madeForKids: boolean): Promise<Channel>;
    /**
     * Sets a channel's watermark.
     * Last tested 05/19/2020 18:07. PASSING
     * @param channelResolvable The channel to set the watermark for.
     * @param type The timing type of the watermark.
     * @param offset The offset, in milliseconds, from the start/end of the video to display the watermark from.
     * @param duration The duration, in millseconds, to display the watermark for.
     * @param image The watermark image.
     */
    setChannelWatermark(channelResolvable: string | Channel, type: 'fromStart' | 'fromEnd', offset: number, duration: number, image: Buffer, imageType: 'png' | 'jpeg'): Promise<void>;
    /**
     * Unsets a channel's watermark.
     * Last tested 05/18/2020 18:23. PASSING
     * @param channelResolvable The channel to unset the watermark from.
     */
    unsetChannelWatermark(channelResolvable: string | Channel): Promise<void>;
    /**
     * Uploads a channel banner.
     * Last tested 05/20/2020 03:17. PASSING
     * @param image The channel banner to upload.
     * @returns The URL of the uploaded banner, used as
     * [[BrandingSettings#image#bannerExternalUrl]] in [[OAuth#updateChannelBranding]]
     */
    uploadChannelBanner(image: {
        data: Buffer;
        type: 'png' | 'jpeg';
    }): Promise<string>;
    /**
     * Adds a [[ChannelSection]] to the authorized user's [[Channel]].
     * Last tested 05/24/2020 10:11. PASSING
     * @param type The type of channel section.
     * @param style The style of the channel section.
     * @param name The name of the channel section.
     * @param position The position of the channel section on the channel homepage.
     * @param language The default language of the channel section.
     * @param playlistsResolvable Any playlists in the channel section.
     * @param channelsResolvable Any channels in the channel section.
     * @param localizations Translations of the channel section's title.
     * @param targeting Targeting data for the channel section.
     */
    addChannelSection(type: ChannelSectionType, style: 'horizontalRow' | 'verticalList', name?: string, language?: string, playlistsResolvable?: (string | Playlist)[], channelsResolvable?: (string | Channel)[], localizations?: {
        [key: string]: {
            title: string;
        };
    }, targeting?: {
        countries?: string[];
        languages?: string[];
        regions?: string[];
    }): Promise<ChannelSection>;
    /**
     * Updates a [[ChannelSection]].
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * Last tested 05/24/2020 10:11. PASSING
     * @param id The ID of the channel section.
     * @param type The type of channel section.
     * @param style The style of the channel section.
     * @param name The name of the channel section.
     * @param position The position of the channel section on the channel homepage.
     * @param language The default language of the channel section.
     * @param playlistsResolvable Any playlists in the channel section.
     * @param channelsResolvable Any channels in the channel section.
     * @param localizations Translations of the channel section's title.
     * @param targeting Targeting data for the channel section.
     */
    updateChannelSection(id: string, type: ChannelSectionType, style: 'horizontalRow' | 'verticalList', name?: string, position?: number, language?: string, playlistsResolvable?: (string | Playlist)[], channelsResolvable?: (string | Channel)[], localizations?: {
        [key: string]: {
            title: string;
        };
    }, targeting?: {
        countries?: string[];
        languages?: string[];
        regions?: string[];
    }): Promise<ChannelSection>;
    /**
     * Deletes a [[ChannelSection]].
     * Last tested 05/24/2020 10:11. PASSING
     * @param id The ID of the channel section.
     */
    deleteChannelSection(id: string): Promise<ChannelSection>;
    /**
     * Get a [[Caption]] object from the ID of the caption.
     * Last tested 06/11/2020 04:50. PASSING
     * @param videoResolvable The Title, URL, or ID of the video to get the caption from.
     * @param captionId The ID of the caption.
     */
    getCaption(videoResolvable: string | Video, captionId: string): Promise<Caption>;
    /**
     * Gets the [[Caption]]s of a [[Video]]. Used mostly internally with [[Video#fetchCaptions]].
     * Last tested 06/11/2020 04:50. PASSING
     * @param videoResolvable The Title, URL, or ID of the video to get the captions from.
     */
    getCaptions(videoResolvable: string | Video): Promise<Caption[]>;
    /**
     * Uploads a [[Caption]] track for a [[Video]].
     * Last tested 06/11/2020 04:50. PASSING
     * @param videoResolvable The video to add the caption track to.
     * @param language The language that the caption track is in.
     * @param name The name of the caption track.
     * @param track The caption track to upload.
     * @param draft Whether or not the caption track is a draft. If it is, it isn't visible to users.
     */
    uploadCaption(videoResolvable: string | Video, language: string, name: string, track: Buffer, draft?: boolean): Promise<Caption>;
    /**
     * Edits a [[Caption]] track.
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * Last tested 06/11/2020 04:50. PASSING
     * @param id The ID of the caption track to edit.
     * @param track The caption track to upload.
     * @param draft Whether or not the caption track is a draft. If it is, it isn't visible to users.
     */
    updateCaption(id: string, track?: Buffer, draft?: boolean): Promise<Caption>;
    /**
     * Downloads a [[Caption]] track.
     * Last tested 06/11/2020 04:50. PASSING
     * @param id The ID of the caption track to download.
     * @param format The file format to download the track in.
     * @param language The language to download the track in.
     */
    downloadCaption(id: string, format?: 'sbv' | 'scc' | 'srt' | 'ttml' | 'vtt', language?: string): Promise<Buffer>;
    /**
     * Deletes a [[Caption]] track.
     * Last tested 06/11/2020 04:50. PASSING
     * @param id The ID of the caption track to delete.
     */
    deleteCaption(id: string): Promise<void>;
    /**
     * Gets a list of [[VideoAbuseReportReason]]s.
     * Last tested 05/18/2020 11:48. PASSING
     */
    getVideoAbuseReportReasons(): Promise<VideoAbuseReportReason[]>;
}
